{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"source/images/2.jpg","path":"images/2.jpg","modified":0,"renderable":0},{"_id":"source/images/3.jpg","path":"images/3.jpg","modified":0,"renderable":0},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","path":"img/bg-pattern.png","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/alpha-dust/.gitignore","hash":"a5a49e4d5dfb97857856eb6b0cdb2c93a387718f","modified":1511091703955},{"_id":"themes/alpha-dust/LICENSE","hash":"9603ca6555bd5f0710038003b8a503bd29ca67a1","modified":1511091703956},{"_id":"themes/alpha-dust/README.md","hash":"9fb2c9bf68861e6aa7e15ce276cf56a9e7213b7b","modified":1511091703958},{"_id":"themes/alpha-dust/_config.yml","hash":"0f1f18eaf6e6e400db3b874646cd96b69a2bdf0c","modified":1511093112447},{"_id":"source/_posts/Markdown-语法说明.md","hash":"4baf4a045dc34e8e99da6b399fac1e9fe368b972","modified":1521871268846},{"_id":"source/_posts/manjaro配置及美化.md","hash":"b22a03257e195fff0e1cb3b68ff57098cb8f0272","modified":1521790844081},{"_id":"source/_posts/vscode-python-配置环境.md","hash":"001040e0d5703aa2f294527e8d50b6c199c2cb5a","modified":1512611056411},{"_id":"source/_posts/python笔记.md","hash":"5525c54979a438da7989f912cd60552cccde2305","modified":1511094440600},{"_id":"source/_posts/数据库.md","hash":"5fb83ab08d5eb95d5a1f020cac223abee14865fb","modified":1521876564297},{"_id":"source/images/1.jpg","hash":"bb8a5d807ea543a638a25339b3ee501fa13c81cf","modified":1511318001126},{"_id":"source/images/2.jpg","hash":"24c001497907cab9dc78059ac40e4bf1530fbe3a","modified":1511318184713},{"_id":"source/images/3.jpg","hash":"edfefef308c3547d10d1a16ba3289be17479c1e7","modified":1511318248146},{"_id":"themes/alpha-dust/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1511091703960},{"_id":"themes/alpha-dust/languages/default.yml","hash":"f0e62ce15272b2c59c9ae7f7615a286c69bf7113","modified":1511091703961},{"_id":"themes/alpha-dust/languages/en.yml","hash":"fd9d378ba28e9f0cb18418ed3134c003693cf689","modified":1511091703963},{"_id":"themes/alpha-dust/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1511091703964},{"_id":"themes/alpha-dust/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1511091703965},{"_id":"themes/alpha-dust/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1511091703967},{"_id":"themes/alpha-dust/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1511091703966},{"_id":"themes/alpha-dust/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1511091703968},{"_id":"themes/alpha-dust/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1511091703969},{"_id":"themes/alpha-dust/languages/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1511091703970},{"_id":"themes/alpha-dust/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1511091703972},{"_id":"source/_posts/Argparse-笔记.md","hash":"c442e04d16a6811d27b5195877e44b8a181f0957","modified":1513481232869},{"_id":"source/_posts/二叉树遍历顺序.md","hash":"04a93b3410c0c95475e7eb6fed813576626d4222","modified":1513235382970},{"_id":"themes/alpha-dust/template/index.html","hash":"674b2011f068af9bf464ac77aafccf6867fcd7c0","modified":1511091704038},{"_id":"themes/alpha-dust/template/archive.html","hash":"6152dc2e093c1431cbe2fa6bc9cb54751c2a7f86","modified":1511091704013},{"_id":"themes/alpha-dust/layout/index.ejs","hash":"0dcf6f1b66722ddadb7479f4edf20281d30a7879","modified":1511091703991},{"_id":"themes/alpha-dust/layout/layout.ejs","hash":"9d1ba5fb467ab4269cbc925b3f2122a29b821b8d","modified":1511091703993},{"_id":"themes/alpha-dust/template/post.html","hash":"daed2747ec15affef2fe1d5cc05432361a2ed6f9","modified":1511091704040},{"_id":"themes/alpha-dust/layout/post.ejs","hash":"4030d46464fd653c0e72a7615c19e7b2d73aa21d","modified":1511091703995},{"_id":"themes/alpha-dust/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1511091703932},{"_id":"themes/alpha-dust/.git/FETCH_HEAD","hash":"8db38674879c9694a9ef663bea759e6e9be7f992","modified":1511093316904},{"_id":"themes/alpha-dust/.git/config","hash":"47b0f56eef1c839a07f772798249ba75be67ab01","modified":1511091703945},{"_id":"themes/alpha-dust/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1511091700669},{"_id":"themes/alpha-dust/.git/index","hash":"66f4bf73796877cb7e1c42f13b4cde0b6a449859","modified":1511091704041},{"_id":"themes/alpha-dust/.git/packed-refs","hash":"7e87e30a08be17d07c3301ff13eb10bab0d3246a","modified":1511091703924},{"_id":"themes/alpha-dust/layout/archive.ejs","hash":"30620dd5e4f24e9d624c235dd16396c5e130deef","modified":1511091703990},{"_id":"themes/alpha-dust/layout/page.ejs","hash":"0eb75322779ab3d2d71f176175d7d25c23ceb076","modified":1511091703994},{"_id":"source/_posts/python笔记/1.png","hash":"4422d423769595af76aad7b8287dd981bbf9d23d","modified":1510905915066},{"_id":"source/_posts/二叉树遍历顺序/2.jpg","hash":"24c001497907cab9dc78059ac40e4bf1530fbe3a","modified":1511318184713},{"_id":"source/_posts/二叉树遍历顺序/1.jpg","hash":"bb8a5d807ea543a638a25339b3ee501fa13c81cf","modified":1511318001126},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1511091704010},{"_id":"themes/alpha-dust/source/css/style.styl","hash":"872f8eb9bd682a5bea66dc119ce2b366b0bba667","modified":1511091704008},{"_id":"themes/alpha-dust/source/js/main.js","hash":"e644dd5c0742f209072c48499c1beba20bc1e496","modified":1511091704011},{"_id":"source/_posts/vscode-python-配置环境/2.png","hash":"ac72c33d4f0876a20615ffa89cd86ade70c98955","modified":1512610427191},{"_id":"source/_posts/vscode-python-配置环境/1.png","hash":"793171d7e507148b66a08b2ac35680a53ab56cd5","modified":1512610409416},{"_id":"themes/alpha-dust/template/img/bg-pattern copy.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1511091704031},{"_id":"themes/alpha-dust/template/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1511091704034},{"_id":"themes/alpha-dust/template/img/bg-pattern-blue.png","hash":"07016986a35c5bfc04c1599829d6a4798c966731","modified":1511091704033},{"_id":"themes/alpha-dust/template/img/hex-bg.png","hash":"a8444a553dd0fd7db09eda830bd3346cc87fc60e","modified":1511091704035},{"_id":"themes/alpha-dust/template/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1511091704014},{"_id":"themes/alpha-dust/template/css/style.styl","hash":"a3d739266fbf9aff73443cf745e4a4d5c284cffc","modified":1511091704018},{"_id":"themes/alpha-dust/template/js/main.js","hash":"ed46e32f0bf6f4502a6558f9ad03843031dc318d","modified":1511091704039},{"_id":"themes/alpha-dust/template/css/style.css","hash":"9c3710b32a4466c3ea5b6232a1af8fccc5877216","modified":1511091704016},{"_id":"themes/alpha-dust/layout/_partial/article-archive.ejs","hash":"f9608407a583bff104acb07c03fd8108056798c7","modified":1511091703974},{"_id":"themes/alpha-dust/layout/_partial/after-footer.ejs","hash":"43ad85ba781c3c98354e9873fe8a49fe50f08bb4","modified":1511091703973},{"_id":"themes/alpha-dust/layout/_partial/article-long.ejs","hash":"9e489edaacdc6bc7c8e60a85365510d135b9aaa5","modified":1511091703976},{"_id":"themes/alpha-dust/template/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1511091704015},{"_id":"themes/alpha-dust/layout/_partial/article-short.ejs","hash":"68d4a8f97e20221a67d0e6700707e2f74cb1574b","modified":1511091703977},{"_id":"themes/alpha-dust/layout/_partial/footer_categories.ejs","hash":"f85cb280ae965fdd1d92af8bc0ece6c4d826a449","modified":1511091703980},{"_id":"themes/alpha-dust/layout/_partial/comments.ejs","hash":"b0bb9c59f517302348aafcb2b832513d53d59055","modified":1511091703978},{"_id":"themes/alpha-dust/layout/_partial/footer_recent_posts.ejs","hash":"8c20579849498be304e47d0f10d42149971eb352","modified":1511091703981},{"_id":"themes/alpha-dust/layout/_partial/gallery.ejs","hash":"63c93ed2dc9c5d9eefeaa8130e9728848731fa64","modified":1511091703982},{"_id":"themes/alpha-dust/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1511091703983},{"_id":"themes/alpha-dust/layout/_partial/header.ejs","hash":"4fa635135f97eaa5f324cf83cb04b083ffdd979f","modified":1511091703986},{"_id":"themes/alpha-dust/layout/_partial/menu.ejs","hash":"760cdaf07f808c9e8637f58e412aea43c4021ec2","modified":1511091703987},{"_id":"themes/alpha-dust/layout/_partial/footer.ejs","hash":"b07b8f7f43811e1b6f5382f6eb4cd778a70bd3cc","modified":1511091703979},{"_id":"themes/alpha-dust/layout/_partial/pagination.ejs","hash":"58982acc8dc2b83c6c2cdf64a2c4156e947254d0","modified":1511091703988},{"_id":"themes/alpha-dust/layout/_partial/head.ejs","hash":"3132acfe6658f31db95a4dae6d818b09b9156d59","modified":1511091703985},{"_id":"themes/alpha-dust/layout/_partial/tag-cat-item.ejs","hash":"9e0ba720e7170b50ed74be55e56333524b009698","modified":1511091703989},{"_id":"source/_posts/二叉树遍历顺序/3.jpg","hash":"edfefef308c3547d10d1a16ba3289be17479c1e7","modified":1511318248146},{"_id":"themes/alpha-dust/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1511091700702},{"_id":"themes/alpha-dust/.git/logs/HEAD","hash":"60b52c121f03627d684ed7eaa372df75ee7245de","modified":1511091703937},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1511091704021},{"_id":"themes/alpha-dust/template/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1511091704020},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1511091704029},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1511091704030},{"_id":"themes/alpha-dust/template/img/session_image.jpeg","hash":"5a3669c0564044f56cb7cea464119a8e388fb18f","modified":1511091704037},{"_id":"themes/alpha-dust/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1511091700692},{"_id":"themes/alpha-dust/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1511091700693},{"_id":"themes/alpha-dust/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1511091700694},{"_id":"themes/alpha-dust/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1511091700690},{"_id":"themes/alpha-dust/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1511091700699},{"_id":"themes/alpha-dust/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1511091700696},{"_id":"themes/alpha-dust/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1511091700697},{"_id":"themes/alpha-dust/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1511091700700},{"_id":"themes/alpha-dust/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1511091700701},{"_id":"themes/alpha-dust/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1511091700691},{"_id":"themes/alpha-dust/source/css/_partial/code.styl","hash":"6c0788e0616a366234157abd18cb6a11b4dc8bfc","modified":1511091703999},{"_id":"themes/alpha-dust/source/css/_partial/archive.styl","hash":"e51d15046b9e10d4342b67bb83fd3a0c42f5d60e","modified":1511091703996},{"_id":"themes/alpha-dust/source/css/_partial/base.styl","hash":"00300febf434b78ad93087e83481d2bf9d2c54a5","modified":1511091703998},{"_id":"themes/alpha-dust/source/css/_partial/header.styl","hash":"d74c2d8968b909c4e2cdab2235b5cebf6eef91c8","modified":1511091704001},{"_id":"themes/alpha-dust/source/css/_partial/menu.styl","hash":"7419c10bf98d059fa0263427c68e009cc0d4c4fa","modified":1511091704002},{"_id":"themes/alpha-dust/source/css/_partial/pagination.styl","hash":"7dfcf43dd05063115f7ebf9e63219a102b35a3ba","modified":1511091704004},{"_id":"themes/alpha-dust/source/css/_partial/footer.styl","hash":"a741adad7f208787c5d863a443da9a3438a01331","modified":1511091704000},{"_id":"themes/alpha-dust/source/css/_partial/post-content.styl","hash":"c3f0ae13c8a953e957da23db6ef7dab2b8217352","modified":1511091704005},{"_id":"themes/alpha-dust/source/css/_partial/post-layout.styl","hash":"bc8376e97266f047457117a965321efdd58e68a3","modified":1511091704006},{"_id":"themes/alpha-dust/source/css/_partial/variables.styl","hash":"f1dbc90648d67e03ba3b311c967977aa50888b38","modified":1511091704007},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1511091704027},{"_id":"themes/alpha-dust/.git/refs/heads/master","hash":"65e94990198d9c4f94567b7760866b9f91b02861","modified":1511091703936},{"_id":"themes/alpha-dust/.git/objects/pack/pack-b2720955267b5e2b1ad8cdf6de0e26421a39e1f6.idx","hash":"88bbcd222954b43f940e522d9bd2531757eb1f0b","modified":1511091703814},{"_id":"themes/alpha-dust/.git/logs/refs/heads/master","hash":"60b52c121f03627d684ed7eaa372df75ee7245de","modified":1511091703938},{"_id":"themes/alpha-dust/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1511091703930},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1511091704025},{"_id":"themes/alpha-dust/.git/logs/refs/remotes/origin/HEAD","hash":"60b52c121f03627d684ed7eaa372df75ee7245de","modified":1511091703930},{"_id":"source/_posts/manjaro配置及美化/1.png","hash":"f7ab01d20e64864c4bf825e843924be20a13f655","modified":1521789817821},{"_id":"themes/alpha-dust/.git/objects/pack/pack-b2720955267b5e2b1ad8cdf6de0e26421a39e1f6.pack","hash":"260b69e273cfdc1bde9b15c8ac217b93fb2b48bb","modified":1511091703845},{"_id":"public/2018/03/15/数据库/index.html","hash":"79d811108eba1087517e70ea6391e1358cb6deda","modified":1521873835623},{"_id":"public/2017/12/14/Markdown-语法说明/index.html","hash":"f927390ad535d8b201ba9abc6775bf6a00c6cb50","modified":1521871286297},{"_id":"public/2017/11/22/二叉树遍历顺序/index.html","hash":"6c0394e1de5bcbd00c12c8ade0375ecefa1e8e8d","modified":1521790031090},{"_id":"public/archives/index.html","hash":"8a47c95bc12bf3b3fa8f28eb66d9060441c4b7fb","modified":1521790031090},{"_id":"public/archives/2017/index.html","hash":"5e0ad9e309b00bc79bc7b2dd9846471899e40a7a","modified":1521790031090},{"_id":"public/archives/2017/11/index.html","hash":"1833416ef76534c4a09e7197740741d6b421a651","modified":1521790031090},{"_id":"public/2017/11/19/Argparse-笔记/index.html","hash":"c5e78146f28a72fb87daaf1617559906c2691799","modified":1521790031090},{"_id":"public/2017/11/18/python笔记/index.html","hash":"c43f55eb6eecb2b4218e6c4e44a61596e54e514e","modified":1521790031090},{"_id":"public/2018/03/23/manjaro配置及美化/index.html","hash":"318ad1bdc319513d5baa2b72fdbaa4bd1bc94d88","modified":1521790884604},{"_id":"public/archives/2017/12/index.html","hash":"f9b4731a404d5106031a3ce91c9cb2985c7d540a","modified":1521790031092},{"_id":"public/2017/12/07/vscode-python-配置环境/index.html","hash":"2b8a345f4d48ed7db92af76326f87e507b0f06c7","modified":1521790031092},{"_id":"public/archives/2018/03/index.html","hash":"cfac36b2cf7dc210f9d0ad446d1aa34ab9778cbd","modified":1521790031092},{"_id":"public/archives/2018/index.html","hash":"bd0c1eb9ccfc6a8373ef21e9e1df41a5eb4ea264","modified":1521790031092},{"_id":"public/tags/python基本知识/index.html","hash":"4c743963fa87900eea8694c938c5352e4f94c340","modified":1521790031092},{"_id":"public/index.html","hash":"cd6595d7a37089471c2e0871da9fa167f0e7bcb0","modified":1521873835623},{"_id":"public/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1521790031093},{"_id":"public/images/1.jpg","hash":"bb8a5d807ea543a638a25339b3ee501fa13c81cf","modified":1521790031093},{"_id":"public/images/2.jpg","hash":"24c001497907cab9dc78059ac40e4bf1530fbe3a","modified":1521790031093},{"_id":"public/2017/11/22/二叉树遍历顺序/1.jpg","hash":"bb8a5d807ea543a638a25339b3ee501fa13c81cf","modified":1521790031093},{"_id":"public/images/3.jpg","hash":"edfefef308c3547d10d1a16ba3289be17479c1e7","modified":1521790031093},{"_id":"public/2017/11/22/二叉树遍历顺序/3.jpg","hash":"edfefef308c3547d10d1a16ba3289be17479c1e7","modified":1521790031093},{"_id":"public/2017/11/22/二叉树遍历顺序/2.jpg","hash":"24c001497907cab9dc78059ac40e4bf1530fbe3a","modified":1521790031093},{"_id":"public/2017/11/18/python笔记/1.png","hash":"4422d423769595af76aad7b8287dd981bbf9d23d","modified":1521790031094},{"_id":"public/2017/12/07/vscode-python-配置环境/2.png","hash":"ac72c33d4f0876a20615ffa89cd86ade70c98955","modified":1521790031728},{"_id":"public/2017/12/07/vscode-python-配置环境/1.png","hash":"793171d7e507148b66a08b2ac35680a53ab56cd5","modified":1521790031728},{"_id":"public/css/style.css","hash":"a8b4312a0a6e600e3c1629df20e2860757370d10","modified":1521790031729},{"_id":"public/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1521790031729},{"_id":"public/2018/03/23/manjaro配置及美化/1.png","hash":"f7ab01d20e64864c4bf825e843924be20a13f655","modified":1521790031767}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Markdown 语法说明","date":"2017-12-14T05:21:12.000Z","_content":"<center>Markdownd的语法说明</center>\n\n# 标题1 \n## 标题2 \n### 标题3\n#### 标题4\n\n分段的情况空一行即可\n\n# 粗体和斜体\n\n`*你好*`表示效果： *你好* ，是斜体的\n\n`_你好_`也是表示斜体的：_你好_\n\n`**你好**`显示的是粗体效果：**你好**\n\n`~~你好~~`显示划线文本：~~你好~~\n\nI end with two spaces (highlight me to see them).\n\nThere's a <br /> above me!\n\n块引用很容易，用`>`完成，如下\n>这是一个块\n\n>这也是一个块\n\n>> 这是什么呢？两个块\n\n# 无序列表和有序列表\n* 开头一个星号，然后空格\n+ 或者一个加号\n- 或者一个减号\n## 下面是有序列表\n1. 你好\n2. hello\n3. 哈哈\n```\n1. 你好\n2. hello\n3. 哈哈\n```\n\n\n\n## 子列表\n1. 啦啦啦\n2. 哈哈哈\n3. 哇哇哇\n    * 一二\n    * 三四\n4. 厉害了\n\n```\n1. 啦啦啦\n2. 哈哈哈\n3. 哇哇哇\n    * 一二\n    * 三四\n4. 厉害了\n```\n\n\n\n# 插入连接和代码\n本文的[Github](https://github.com/xiexuliunian \"这是我的个人github主页哟\")\n```\n本文的[Github](https://github.com/xiexuliunian \"这是我的个人github主页哟\")\n```\n对图片的引用格式为：\n```\n![图片名字](网址)\n```\n![陌上花开](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1513240842596&di=3f709ec01342b92906b56d3e4fcad471&imgtype=0&src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fitem%2F201407%2F30%2F20140730143346_MUG4w.thumb.700_0.jpeg)\n\n\n分割线可以为`***`或者`---`\n\n***\n\n---\nBoxes below without the 'x' are unchecked HTML checkboxes.\n- [ ] First task to complete.\n- [ ] Second task that needs done\nThis checkbox below will be a checked HTML checkbox.\n- [x] This task has been completed\n\n选框代码如下\n\n```shell\nBoxes below without the 'x' are unchecked HTML checkboxes.\n- [ ] First task to complete.\n- [ ] Second task that needs done\nThis checkbox below will be a checked HTML checkbox.\n- [x] This task has been completed\n\n```\n\n# 代码块\n可以使用四个空格，或一个制表符表示\n\n    啦啦啦\n\n```ruby\ndef foobar\n    puts \"Hello world!\"\nend\n```\n## 链接\n[Click me!](http://www.baidu.com/ \"这是一个百度链接\")\n\n`[Click me!](http://www.baidu.com/ \"这是一个百度链接\")`\n\n## 图片\n<https://www.baidu.com>  \n[百度](www.baidu.com)\n\n## 自动电子邮件\n[邮箱](zzuzxd@126.com)\n\n## 表示键盘按键\nYour computer crashed? Try sending a\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>\n\n`Your computer crashed? Try sending a\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>`\n\n## 表格\n|你好|啦啦|呼呼|\n|:-|:-:|-:|\n|左|中|右|\n|一|二|三|\n\n\n\n\n","source":"_posts/Markdown-语法说明.md","raw":"---\ntitle: Markdown 语法说明\ndate: 2017-12-14 13:21:12\ntags:\n---\n<center>Markdownd的语法说明</center>\n\n# 标题1 \n## 标题2 \n### 标题3\n#### 标题4\n\n分段的情况空一行即可\n\n# 粗体和斜体\n\n`*你好*`表示效果： *你好* ，是斜体的\n\n`_你好_`也是表示斜体的：_你好_\n\n`**你好**`显示的是粗体效果：**你好**\n\n`~~你好~~`显示划线文本：~~你好~~\n\nI end with two spaces (highlight me to see them).\n\nThere's a <br /> above me!\n\n块引用很容易，用`>`完成，如下\n>这是一个块\n\n>这也是一个块\n\n>> 这是什么呢？两个块\n\n# 无序列表和有序列表\n* 开头一个星号，然后空格\n+ 或者一个加号\n- 或者一个减号\n## 下面是有序列表\n1. 你好\n2. hello\n3. 哈哈\n```\n1. 你好\n2. hello\n3. 哈哈\n```\n\n\n\n## 子列表\n1. 啦啦啦\n2. 哈哈哈\n3. 哇哇哇\n    * 一二\n    * 三四\n4. 厉害了\n\n```\n1. 啦啦啦\n2. 哈哈哈\n3. 哇哇哇\n    * 一二\n    * 三四\n4. 厉害了\n```\n\n\n\n# 插入连接和代码\n本文的[Github](https://github.com/xiexuliunian \"这是我的个人github主页哟\")\n```\n本文的[Github](https://github.com/xiexuliunian \"这是我的个人github主页哟\")\n```\n对图片的引用格式为：\n```\n![图片名字](网址)\n```\n![陌上花开](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1513240842596&di=3f709ec01342b92906b56d3e4fcad471&imgtype=0&src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fitem%2F201407%2F30%2F20140730143346_MUG4w.thumb.700_0.jpeg)\n\n\n分割线可以为`***`或者`---`\n\n***\n\n---\nBoxes below without the 'x' are unchecked HTML checkboxes.\n- [ ] First task to complete.\n- [ ] Second task that needs done\nThis checkbox below will be a checked HTML checkbox.\n- [x] This task has been completed\n\n选框代码如下\n\n```shell\nBoxes below without the 'x' are unchecked HTML checkboxes.\n- [ ] First task to complete.\n- [ ] Second task that needs done\nThis checkbox below will be a checked HTML checkbox.\n- [x] This task has been completed\n\n```\n\n# 代码块\n可以使用四个空格，或一个制表符表示\n\n    啦啦啦\n\n```ruby\ndef foobar\n    puts \"Hello world!\"\nend\n```\n## 链接\n[Click me!](http://www.baidu.com/ \"这是一个百度链接\")\n\n`[Click me!](http://www.baidu.com/ \"这是一个百度链接\")`\n\n## 图片\n<https://www.baidu.com>  \n[百度](www.baidu.com)\n\n## 自动电子邮件\n[邮箱](zzuzxd@126.com)\n\n## 表示键盘按键\nYour computer crashed? Try sending a\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>\n\n`Your computer crashed? Try sending a\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>`\n\n## 表格\n|你好|啦啦|呼呼|\n|:-|:-:|-:|\n|左|中|右|\n|一|二|三|\n\n\n\n\n","slug":"Markdown-语法说明","published":1,"updated":"2018-03-24T06:01:08.846Z","_id":"cjf3mhqez0000v47xfvj85ki0","comments":1,"layout":"post","photos":[],"link":"","content":"<center>Markdownd的语法说明</center>\n\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><p>分段的情况空一行即可</p>\n<h1 id=\"粗体和斜体\"><a href=\"#粗体和斜体\" class=\"headerlink\" title=\"粗体和斜体\"></a>粗体和斜体</h1><p><code>*你好*</code>表示效果： <em>你好</em> ，是斜体的</p>\n<p><code>_你好_</code>也是表示斜体的：<em>你好</em></p>\n<p><code>**你好**</code>显示的是粗体效果：<strong>你好</strong></p>\n<p><code>~~你好~~</code>显示划线文本：<del>你好</del></p>\n<p>I end with two spaces (highlight me to see them).</p>\n<p>There’s a <br> above me!</p>\n<p>块引用很容易，用<code>&gt;</code>完成，如下</p>\n<blockquote>\n<p>这是一个块</p>\n<p>这也是一个块</p>\n<blockquote>\n<p>这是什么呢？两个块</p>\n</blockquote>\n</blockquote>\n<h1 id=\"无序列表和有序列表\"><a href=\"#无序列表和有序列表\" class=\"headerlink\" title=\"无序列表和有序列表\"></a>无序列表和有序列表</h1><ul>\n<li>开头一个星号，然后空格</li>\n</ul>\n<ul>\n<li>或者一个加号</li>\n</ul>\n<ul>\n<li>或者一个减号<h2 id=\"下面是有序列表\"><a href=\"#下面是有序列表\" class=\"headerlink\" title=\"下面是有序列表\"></a>下面是有序列表</h2></li>\n</ul>\n<ol>\n<li>你好</li>\n<li>hello</li>\n<li>哈哈<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 你好</span><br><span class=\"line\">2. hello</span><br><span class=\"line\">3. 哈哈</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"子列表\"><a href=\"#子列表\" class=\"headerlink\" title=\"子列表\"></a>子列表</h2><ol>\n<li>啦啦啦</li>\n<li>哈哈哈</li>\n<li>哇哇哇<ul>\n<li>一二</li>\n<li>三四</li>\n</ul>\n</li>\n<li>厉害了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 啦啦啦</span><br><span class=\"line\">2. 哈哈哈</span><br><span class=\"line\">3. 哇哇哇</span><br><span class=\"line\">    * 一二</span><br><span class=\"line\">    * 三四</span><br><span class=\"line\">4. 厉害了</span><br></pre></td></tr></table></figure>\n<h1 id=\"插入连接和代码\"><a href=\"#插入连接和代码\" class=\"headerlink\" title=\"插入连接和代码\"></a>插入连接和代码</h1><p>本文的<a href=\"https://github.com/xiexuliunian\" title=\"这是我的个人github主页哟\" target=\"_blank\" rel=\"noopener\">Github</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本文的[Github](https://github.com/xiexuliunian &quot;这是我的个人github主页哟&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>对图片的引用格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片名字](网址)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1513240842596&amp;di=3f709ec01342b92906b56d3e4fcad471&amp;imgtype=0&amp;src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fitem%2F201407%2F30%2F20140730143346_MUG4w.thumb.700_0.jpeg\" alt=\"陌上花开\"></p>\n<p>分割线可以为<code>***</code>或者<code>---</code></p>\n<hr>\n<hr>\n<p>Boxes below without the ‘x’ are unchecked HTML checkboxes.</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> First task to complete.</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Second task that needs done<br>This checkbox below will be a checked HTML checkbox.</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> This task has been completed</li>\n</ul>\n<p>选框代码如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boxes below without the 'x' are unchecked HTML checkboxes.</span><br><span class=\"line\">- [ ] First task to complete.</span><br><span class=\"line\">- [ ] Second task that needs done</span><br><span class=\"line\">This checkbox below will be a checked HTML checkbox.</span><br><span class=\"line\">- [x] This task has been completed</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h1><p>可以使用四个空格，或一个制表符表示</p>\n<pre><code>啦啦啦\n</code></pre><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foobar</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"http://www.baidu.com/\" title=\"这是一个百度链接\" target=\"_blank\" rel=\"noopener\">Click me!</a></p>\n<p><code>[Click me!](http://www.baidu.com/ &quot;这是一个百度链接&quot;)</code></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a><br><a href=\"www.baidu.com\">百度</a></p>\n<h2 id=\"自动电子邮件\"><a href=\"#自动电子邮件\" class=\"headerlink\" title=\"自动电子邮件\"></a>自动电子邮件</h2><p><a href=\"zzuzxd@126.com\">邮箱</a></p>\n<h2 id=\"表示键盘按键\"><a href=\"#表示键盘按键\" class=\"headerlink\" title=\"表示键盘按键\"></a>表示键盘按键</h2><p>Your computer crashed? Try sending a<br><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd></p>\n<p><code>Your computer crashed? Try sending a\n&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt;</code></p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">你好</th>\n<th style=\"text-align:center\">啦啦</th>\n<th style=\"text-align:right\">呼呼</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">左</td>\n<td style=\"text-align:center\">中</td>\n<td style=\"text-align:right\">右</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一</td>\n<td style=\"text-align:center\">二</td>\n<td style=\"text-align:right\">三</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<center>Markdownd的语法说明</center>\n\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><p>分段的情况空一行即可</p>\n<h1 id=\"粗体和斜体\"><a href=\"#粗体和斜体\" class=\"headerlink\" title=\"粗体和斜体\"></a>粗体和斜体</h1><p><code>*你好*</code>表示效果： <em>你好</em> ，是斜体的</p>\n<p><code>_你好_</code>也是表示斜体的：<em>你好</em></p>\n<p><code>**你好**</code>显示的是粗体效果：<strong>你好</strong></p>\n<p><code>~~你好~~</code>显示划线文本：<del>你好</del></p>\n<p>I end with two spaces (highlight me to see them).</p>\n<p>There’s a <br> above me!</p>\n<p>块引用很容易，用<code>&gt;</code>完成，如下</p>\n<blockquote>\n<p>这是一个块</p>\n<p>这也是一个块</p>\n<blockquote>\n<p>这是什么呢？两个块</p>\n</blockquote>\n</blockquote>\n<h1 id=\"无序列表和有序列表\"><a href=\"#无序列表和有序列表\" class=\"headerlink\" title=\"无序列表和有序列表\"></a>无序列表和有序列表</h1><ul>\n<li>开头一个星号，然后空格</li>\n</ul>\n<ul>\n<li>或者一个加号</li>\n</ul>\n<ul>\n<li>或者一个减号<h2 id=\"下面是有序列表\"><a href=\"#下面是有序列表\" class=\"headerlink\" title=\"下面是有序列表\"></a>下面是有序列表</h2></li>\n</ul>\n<ol>\n<li>你好</li>\n<li>hello</li>\n<li>哈哈<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 你好</span><br><span class=\"line\">2. hello</span><br><span class=\"line\">3. 哈哈</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"子列表\"><a href=\"#子列表\" class=\"headerlink\" title=\"子列表\"></a>子列表</h2><ol>\n<li>啦啦啦</li>\n<li>哈哈哈</li>\n<li>哇哇哇<ul>\n<li>一二</li>\n<li>三四</li>\n</ul>\n</li>\n<li>厉害了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 啦啦啦</span><br><span class=\"line\">2. 哈哈哈</span><br><span class=\"line\">3. 哇哇哇</span><br><span class=\"line\">    * 一二</span><br><span class=\"line\">    * 三四</span><br><span class=\"line\">4. 厉害了</span><br></pre></td></tr></table></figure>\n<h1 id=\"插入连接和代码\"><a href=\"#插入连接和代码\" class=\"headerlink\" title=\"插入连接和代码\"></a>插入连接和代码</h1><p>本文的<a href=\"https://github.com/xiexuliunian\" title=\"这是我的个人github主页哟\" target=\"_blank\" rel=\"noopener\">Github</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本文的[Github](https://github.com/xiexuliunian &quot;这是我的个人github主页哟&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>对图片的引用格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片名字](网址)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1513240842596&amp;di=3f709ec01342b92906b56d3e4fcad471&amp;imgtype=0&amp;src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fitem%2F201407%2F30%2F20140730143346_MUG4w.thumb.700_0.jpeg\" alt=\"陌上花开\"></p>\n<p>分割线可以为<code>***</code>或者<code>---</code></p>\n<hr>\n<hr>\n<p>Boxes below without the ‘x’ are unchecked HTML checkboxes.</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> First task to complete.</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Second task that needs done<br>This checkbox below will be a checked HTML checkbox.</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> This task has been completed</li>\n</ul>\n<p>选框代码如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boxes below without the 'x' are unchecked HTML checkboxes.</span><br><span class=\"line\">- [ ] First task to complete.</span><br><span class=\"line\">- [ ] Second task that needs done</span><br><span class=\"line\">This checkbox below will be a checked HTML checkbox.</span><br><span class=\"line\">- [x] This task has been completed</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h1><p>可以使用四个空格，或一个制表符表示</p>\n<pre><code>啦啦啦\n</code></pre><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foobar</span></span></span><br><span class=\"line\">    puts <span class=\"string\">\"Hello world!\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"http://www.baidu.com/\" title=\"这是一个百度链接\" target=\"_blank\" rel=\"noopener\">Click me!</a></p>\n<p><code>[Click me!](http://www.baidu.com/ &quot;这是一个百度链接&quot;)</code></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a><br><a href=\"www.baidu.com\">百度</a></p>\n<h2 id=\"自动电子邮件\"><a href=\"#自动电子邮件\" class=\"headerlink\" title=\"自动电子邮件\"></a>自动电子邮件</h2><p><a href=\"zzuzxd@126.com\">邮箱</a></p>\n<h2 id=\"表示键盘按键\"><a href=\"#表示键盘按键\" class=\"headerlink\" title=\"表示键盘按键\"></a>表示键盘按键</h2><p>Your computer crashed? Try sending a<br><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd></p>\n<p><code>Your computer crashed? Try sending a\n&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt;</code></p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">你好</th>\n<th style=\"text-align:center\">啦啦</th>\n<th style=\"text-align:right\">呼呼</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">左</td>\n<td style=\"text-align:center\">中</td>\n<td style=\"text-align:right\">右</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一</td>\n<td style=\"text-align:center\">二</td>\n<td style=\"text-align:right\">三</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"vscode python 配置环境","date":"2017-12-07T01:19:09.000Z","_content":"# <center>vscode python 的配置环境</center>\n* 以下的配置仅针对，python vscode \n## 第一步，安装好vscode,安装好python\n## 第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python configration中进行设置。如下图\n<center>{% asset_img 1.png 说明 %}</center>\n\n## 这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\n<center>{% asset_img 2.png 说明 %}</center>\n\n## 第三步，在vscode中新建一个python文件，按`ctrl`+`shift`+`B`来运行的话，会让你配置一个`tasks.json`的文件，由于有两个版本，这里就放两种写法。\n```json\n{\n\t\"version\": \"0.1.0\",\n\t// \"windows\": {\n\t// \t\"command\": \"python\"\n    // },\n\t// \"command\": \"${config:python.pythonPath}\",\n\t\"command\": \"python\",\n\t\"isShellCommand\": true,\n\t\"showOutput\": \"always\",\n\t\"args\": [\"${file}\"],\n\t\"options\": {\n        \"env\": {\n            \"PYTHONIOENCODING\": \"UTF-8\"\n        }\n    }\n}\n```\n``` json\n// {\n//     // See https://go.microsoft.com/fwlink/?LinkId=733558\n//     // for the documentation about the tasks.json format\n//     \"version\": \"2.0.0\",\n//     \"tasks\": [\n//         {\n//             \"label\": \"Run Python Code\",\n//             \"type\": \"shell\",\n//             \"command\": \"python\",\n//             \"args\": [\n//                 \"'${file}'\"\n//             ],\n//             \"group\": {\n//                 \"kind\": \"build\",\n//                 \"isDefault\": true\n//             },\n//             \"presentation\": {\n//                 \"echo\": true,\n//                 \"reveal\": \"always\",\n//                 \"focus\": true,\n//                 \"panel\": \"shared\"\n//             }\n//         }\n//     ]\n// }\n```\n* 注意，请尽量不要在绝对路径里面加空格，不然很麻烦。\n\n\n","source":"_posts/vscode-python-配置环境.md","raw":"---\ntitle: vscode python 配置环境\ndate: 2017-12-07 09:19:09\ntags:\n---\n# <center>vscode python 的配置环境</center>\n* 以下的配置仅针对，python vscode \n## 第一步，安装好vscode,安装好python\n## 第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python configration中进行设置。如下图\n<center>{% asset_img 1.png 说明 %}</center>\n\n## 这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\n<center>{% asset_img 2.png 说明 %}</center>\n\n## 第三步，在vscode中新建一个python文件，按`ctrl`+`shift`+`B`来运行的话，会让你配置一个`tasks.json`的文件，由于有两个版本，这里就放两种写法。\n```json\n{\n\t\"version\": \"0.1.0\",\n\t// \"windows\": {\n\t// \t\"command\": \"python\"\n    // },\n\t// \"command\": \"${config:python.pythonPath}\",\n\t\"command\": \"python\",\n\t\"isShellCommand\": true,\n\t\"showOutput\": \"always\",\n\t\"args\": [\"${file}\"],\n\t\"options\": {\n        \"env\": {\n            \"PYTHONIOENCODING\": \"UTF-8\"\n        }\n    }\n}\n```\n``` json\n// {\n//     // See https://go.microsoft.com/fwlink/?LinkId=733558\n//     // for the documentation about the tasks.json format\n//     \"version\": \"2.0.0\",\n//     \"tasks\": [\n//         {\n//             \"label\": \"Run Python Code\",\n//             \"type\": \"shell\",\n//             \"command\": \"python\",\n//             \"args\": [\n//                 \"'${file}'\"\n//             ],\n//             \"group\": {\n//                 \"kind\": \"build\",\n//                 \"isDefault\": true\n//             },\n//             \"presentation\": {\n//                 \"echo\": true,\n//                 \"reveal\": \"always\",\n//                 \"focus\": true,\n//                 \"panel\": \"shared\"\n//             }\n//         }\n//     ]\n// }\n```\n* 注意，请尽量不要在绝对路径里面加空格，不然很麻烦。\n\n\n","slug":"vscode-python-配置环境","published":1,"updated":"2017-12-07T01:44:16.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3mhqg30001v47xdehxpdgf","content":"<h1 id=\"vscode-python-的配置环境\"><a href=\"#vscode-python-的配置环境\" class=\"headerlink\" title=\"vscode python 的配置环境\"></a><center>vscode python 的配置环境</center></h1><ul>\n<li>以下的配置仅针对，python vscode <h2 id=\"第一步，安装好vscode-安装好python\"><a href=\"#第一步，安装好vscode-安装好python\" class=\"headerlink\" title=\"第一步，安装好vscode,安装好python\"></a>第一步，安装好vscode,安装好python</h2><h2 id=\"第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python-configration中进行设置。如下图\"><a href=\"#第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python-configration中进行设置。如下图\" class=\"headerlink\" title=\"第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python configration中进行设置。如下图\"></a>第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python configration中进行设置。如下图</h2><center><img src=\"/2017/12/07/vscode-python-配置环境/1.png\" title=\"说明\"></center>\n\n</li>\n</ul>\n<h2 id=\"这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\"><a href=\"#这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\" class=\"headerlink\" title=\"这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\"></a>这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。</h2><center><img src=\"/2017/12/07/vscode-python-配置环境/2.png\" title=\"说明\"></center>\n\n<h2 id=\"第三步，在vscode中新建一个python文件，按ctrl-shift-B来运行的话，会让你配置一个tasks-json的文件，由于有两个版本，这里就放两种写法。\"><a href=\"#第三步，在vscode中新建一个python文件，按ctrl-shift-B来运行的话，会让你配置一个tasks-json的文件，由于有两个版本，这里就放两种写法。\" class=\"headerlink\" title=\"第三步，在vscode中新建一个python文件，按ctrl+shift+B来运行的话，会让你配置一个tasks.json的文件，由于有两个版本，这里就放两种写法。\"></a>第三步，在vscode中新建一个python文件，按<code>ctrl</code>+<code>shift</code>+<code>B</code>来运行的话，会让你配置一个<code>tasks.json</code>的文件，由于有两个版本，这里就放两种写法。</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">\t// \"windows\": &#123;</span><br><span class=\"line\">\t// \t\"command\": \"python\"</span><br><span class=\"line\">    // &#125;,</span><br><span class=\"line\">\t// \"command\": \"$&#123;config:python.pythonPath&#125;\",</span><br><span class=\"line\">\t\"command\": \"python\",</span><br><span class=\"line\">\t\"isShellCommand\": true,</span><br><span class=\"line\">\t\"showOutput\": \"always\",</span><br><span class=\"line\">\t\"args\": [\"$&#123;file&#125;\"],</span><br><span class=\"line\">\t\"options\": &#123;</span><br><span class=\"line\">        \"env\": &#123;</span><br><span class=\"line\">            \"PYTHONIOENCODING\": \"UTF-8\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &#123;</span><br><span class=\"line\">//     // See https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class=\"line\">//     // for the documentation about the tasks.json format</span><br><span class=\"line\">//     \"version\": \"2.0.0\",</span><br><span class=\"line\">//     \"tasks\": [</span><br><span class=\"line\">//         &#123;</span><br><span class=\"line\">//             \"label\": \"Run Python Code\",</span><br><span class=\"line\">//             \"type\": \"shell\",</span><br><span class=\"line\">//             \"command\": \"python\",</span><br><span class=\"line\">//             \"args\": [</span><br><span class=\"line\">//                 \"'$&#123;file&#125;'\"</span><br><span class=\"line\">//             ],</span><br><span class=\"line\">//             \"group\": &#123;</span><br><span class=\"line\">//                 \"kind\": \"build\",</span><br><span class=\"line\">//                 \"isDefault\": true</span><br><span class=\"line\">//             &#125;,</span><br><span class=\"line\">//             \"presentation\": &#123;</span><br><span class=\"line\">//                 \"echo\": true,</span><br><span class=\"line\">//                 \"reveal\": \"always\",</span><br><span class=\"line\">//                 \"focus\": true,</span><br><span class=\"line\">//                 \"panel\": \"shared\"</span><br><span class=\"line\">//             &#125;</span><br><span class=\"line\">//         &#125;</span><br><span class=\"line\">//     ]</span><br><span class=\"line\">// &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意，请尽量不要在绝对路径里面加空格，不然很麻烦。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vscode-python-的配置环境\"><a href=\"#vscode-python-的配置环境\" class=\"headerlink\" title=\"vscode python 的配置环境\"></a><center>vscode python 的配置环境</center></h1><ul>\n<li>以下的配置仅针对，python vscode <h2 id=\"第一步，安装好vscode-安装好python\"><a href=\"#第一步，安装好vscode-安装好python\" class=\"headerlink\" title=\"第一步，安装好vscode,安装好python\"></a>第一步，安装好vscode,安装好python</h2><h2 id=\"第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python-configration中进行设置。如下图\"><a href=\"#第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python-configration中进行设置。如下图\" class=\"headerlink\" title=\"第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python configration中进行设置。如下图\"></a>第二步，在vscode中配置自己安装的python环境，由于我的环境采用了python虚拟环境，需要在vscode中说明。在设置的python configration中进行设置。如下图</h2><center><img src=\"/2017/12/07/vscode-python-配置环境/1.png\" title=\"说明\"></center>\n\n</li>\n</ul>\n<h2 id=\"这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\"><a href=\"#这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\" class=\"headerlink\" title=\"这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。\"></a>这里设置是，python的虚拟环境绝对路径，尽量不要添加空格，本文中由于之前添加空格了，如图，由于许多的开发环境都在里面，就很难改了。</h2><center><img src=\"/2017/12/07/vscode-python-配置环境/2.png\" title=\"说明\"></center>\n\n<h2 id=\"第三步，在vscode中新建一个python文件，按ctrl-shift-B来运行的话，会让你配置一个tasks-json的文件，由于有两个版本，这里就放两种写法。\"><a href=\"#第三步，在vscode中新建一个python文件，按ctrl-shift-B来运行的话，会让你配置一个tasks-json的文件，由于有两个版本，这里就放两种写法。\" class=\"headerlink\" title=\"第三步，在vscode中新建一个python文件，按ctrl+shift+B来运行的话，会让你配置一个tasks.json的文件，由于有两个版本，这里就放两种写法。\"></a>第三步，在vscode中新建一个python文件，按<code>ctrl</code>+<code>shift</code>+<code>B</code>来运行的话，会让你配置一个<code>tasks.json</code>的文件，由于有两个版本，这里就放两种写法。</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">\t// \"windows\": &#123;</span><br><span class=\"line\">\t// \t\"command\": \"python\"</span><br><span class=\"line\">    // &#125;,</span><br><span class=\"line\">\t// \"command\": \"$&#123;config:python.pythonPath&#125;\",</span><br><span class=\"line\">\t\"command\": \"python\",</span><br><span class=\"line\">\t\"isShellCommand\": true,</span><br><span class=\"line\">\t\"showOutput\": \"always\",</span><br><span class=\"line\">\t\"args\": [\"$&#123;file&#125;\"],</span><br><span class=\"line\">\t\"options\": &#123;</span><br><span class=\"line\">        \"env\": &#123;</span><br><span class=\"line\">            \"PYTHONIOENCODING\": \"UTF-8\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &#123;</span><br><span class=\"line\">//     // See https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class=\"line\">//     // for the documentation about the tasks.json format</span><br><span class=\"line\">//     \"version\": \"2.0.0\",</span><br><span class=\"line\">//     \"tasks\": [</span><br><span class=\"line\">//         &#123;</span><br><span class=\"line\">//             \"label\": \"Run Python Code\",</span><br><span class=\"line\">//             \"type\": \"shell\",</span><br><span class=\"line\">//             \"command\": \"python\",</span><br><span class=\"line\">//             \"args\": [</span><br><span class=\"line\">//                 \"'$&#123;file&#125;'\"</span><br><span class=\"line\">//             ],</span><br><span class=\"line\">//             \"group\": &#123;</span><br><span class=\"line\">//                 \"kind\": \"build\",</span><br><span class=\"line\">//                 \"isDefault\": true</span><br><span class=\"line\">//             &#125;,</span><br><span class=\"line\">//             \"presentation\": &#123;</span><br><span class=\"line\">//                 \"echo\": true,</span><br><span class=\"line\">//                 \"reveal\": \"always\",</span><br><span class=\"line\">//                 \"focus\": true,</span><br><span class=\"line\">//                 \"panel\": \"shared\"</span><br><span class=\"line\">//             &#125;</span><br><span class=\"line\">//         &#125;</span><br><span class=\"line\">//     ]</span><br><span class=\"line\">// &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意，请尽量不要在绝对路径里面加空格，不然很麻烦。</li>\n</ul>\n"},{"title":"manjaro配置及美化","date":"2018-03-23T06:52:44.000Z","_content":"# <center>manjaro(麻将)配置及美化</center>\nmanjaro是一款基于archlinux的linux发行版，以前主要用`ubuntu`系统的，主要用来使用CUDA的，在ubuntu上的安装过程十分痛苦，第一次使用manjaro,在其上的安装过程让我惊叹，这么好用呀，所以就迷上了这款系统。\n\n\n## 1. 系统安装\n* 在制作启动盘时，使用其他的启动盘制作都会无法进行安装，使用rufus这款软件，以DD模式写入才可以安装。\n\n*  跟在ubuntu上的安装过程十分类似，都是图形界面的，但是有一点，注意要在win10的EFI分区(本机是/dev/sda2 上选择`/boot/efi`标记),其余都是类似的，点下一步就ok了\n\n## 2.系统更新及软件安装\n## 更换中国源\n```\nsudo pacman-mirrors -b testing -c China  //选择中国源并更新  \nsudo pacman -Syyu  //更新系统  \n```\n## 添加源\n打开终端输入\n```\nsudo nano /etc/pacman.conf\n```\n在文件底部加入\n\n```\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n然后执行\n`sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring`\n之后就可以从包管理器中搜索安装各种软件了enjoying，部分软件仍然需要配置，如搜狗输入法\n```\nsudo pacman -S fcitx-sogoupinyin\nsudo pacman -S fcitx-im  #全部安装\nsuao pacman -S fcitx-configtool  #图形化配置工具\n```\n需要设置输入法变量\n`sudo gedit ~/.profile(有可能是.xprofile)`,在其底部加入\n```\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=”@im=fcitx”\n```\n另外一个安装是使用AUR源，首先安装yaourt\n\n`sudo pacman -S yaourt`\n\n修改`/etc/yaourtrc`,去掉`# AURURL`的注释，修改为\n```\nAURURL=\"https://aur.tuna.tsinghua.edu.cn\"\n```\n\n这样就可以使用AUR源了哟\n\n## 3. 系统美化\n## 来个配件大全\n\n## 主题\nApplication:`Arc`\n\nCursor:`Xcursor-breeze`\n\nIcons:`Numix-Circle-Light`\n\nShell:`Adapta-Nokto-Eta-Maia`\n\n## 下面放美图\n<center>{% asset_img 1.png 说明 %}</center>\n\n","source":"_posts/manjaro配置及美化.md","raw":"---\ntitle: manjaro配置及美化\ndate: 2018-03-23 14:52:44\ntags:\n---\n# <center>manjaro(麻将)配置及美化</center>\nmanjaro是一款基于archlinux的linux发行版，以前主要用`ubuntu`系统的，主要用来使用CUDA的，在ubuntu上的安装过程十分痛苦，第一次使用manjaro,在其上的安装过程让我惊叹，这么好用呀，所以就迷上了这款系统。\n\n\n## 1. 系统安装\n* 在制作启动盘时，使用其他的启动盘制作都会无法进行安装，使用rufus这款软件，以DD模式写入才可以安装。\n\n*  跟在ubuntu上的安装过程十分类似，都是图形界面的，但是有一点，注意要在win10的EFI分区(本机是/dev/sda2 上选择`/boot/efi`标记),其余都是类似的，点下一步就ok了\n\n## 2.系统更新及软件安装\n## 更换中国源\n```\nsudo pacman-mirrors -b testing -c China  //选择中国源并更新  \nsudo pacman -Syyu  //更新系统  \n```\n## 添加源\n打开终端输入\n```\nsudo nano /etc/pacman.conf\n```\n在文件底部加入\n\n```\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n然后执行\n`sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring`\n之后就可以从包管理器中搜索安装各种软件了enjoying，部分软件仍然需要配置，如搜狗输入法\n```\nsudo pacman -S fcitx-sogoupinyin\nsudo pacman -S fcitx-im  #全部安装\nsuao pacman -S fcitx-configtool  #图形化配置工具\n```\n需要设置输入法变量\n`sudo gedit ~/.profile(有可能是.xprofile)`,在其底部加入\n```\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=”@im=fcitx”\n```\n另外一个安装是使用AUR源，首先安装yaourt\n\n`sudo pacman -S yaourt`\n\n修改`/etc/yaourtrc`,去掉`# AURURL`的注释，修改为\n```\nAURURL=\"https://aur.tuna.tsinghua.edu.cn\"\n```\n\n这样就可以使用AUR源了哟\n\n## 3. 系统美化\n## 来个配件大全\n\n## 主题\nApplication:`Arc`\n\nCursor:`Xcursor-breeze`\n\nIcons:`Numix-Circle-Light`\n\nShell:`Adapta-Nokto-Eta-Maia`\n\n## 下面放美图\n<center>{% asset_img 1.png 说明 %}</center>\n\n","slug":"manjaro配置及美化","published":1,"updated":"2018-03-23T07:40:44.081Z","_id":"cjf3mhqg50002v47xadyop24h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"manjaro-麻将-配置及美化\"><a href=\"#manjaro-麻将-配置及美化\" class=\"headerlink\" title=\"manjaro(麻将)配置及美化\"></a><center>manjaro(麻将)配置及美化</center></h1><p>manjaro是一款基于archlinux的linux发行版，以前主要用<code>ubuntu</code>系统的，主要用来使用CUDA的，在ubuntu上的安装过程十分痛苦，第一次使用manjaro,在其上的安装过程让我惊叹，这么好用呀，所以就迷上了这款系统。</p>\n<h2 id=\"1-系统安装\"><a href=\"#1-系统安装\" class=\"headerlink\" title=\"1. 系统安装\"></a>1. 系统安装</h2><ul>\n<li><p>在制作启动盘时，使用其他的启动盘制作都会无法进行安装，使用rufus这款软件，以DD模式写入才可以安装。</p>\n</li>\n<li><p>跟在ubuntu上的安装过程十分类似，都是图形界面的，但是有一点，注意要在win10的EFI分区(本机是/dev/sda2 上选择<code>/boot/efi</code>标记),其余都是类似的，点下一步就ok了</p>\n</li>\n</ul>\n<h2 id=\"2-系统更新及软件安装\"><a href=\"#2-系统更新及软件安装\" class=\"headerlink\" title=\"2.系统更新及软件安装\"></a>2.系统更新及软件安装</h2><h2 id=\"更换中国源\"><a href=\"#更换中国源\" class=\"headerlink\" title=\"更换中国源\"></a>更换中国源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -b testing -c China  //选择中国源并更新  </span><br><span class=\"line\">sudo pacman -Syyu  //更新系统</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加源\"><a href=\"#添加源\" class=\"headerlink\" title=\"添加源\"></a>添加源</h2><p>打开终端输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure></p>\n<p>在文件底部加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustedOnly</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n<p>然后执行<br><code>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code><br>之后就可以从包管理器中搜索安装各种软件了enjoying，部分软件仍然需要配置，如搜狗输入法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx-sogoupinyin</span><br><span class=\"line\">sudo pacman -S fcitx-im  #全部安装</span><br><span class=\"line\">suao pacman -S fcitx-configtool  #图形化配置工具</span><br></pre></td></tr></table></figure></p>\n<p>需要设置输入法变量<br><code>sudo gedit ~/.profile(有可能是.xprofile)</code>,在其底部加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure></p>\n<p>另外一个安装是使用AUR源，首先安装yaourt</p>\n<p><code>sudo pacman -S yaourt</code></p>\n<p>修改<code>/etc/yaourtrc</code>,去掉<code># AURURL</code>的注释，修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AURURL=&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以使用AUR源了哟</p>\n<h2 id=\"3-系统美化\"><a href=\"#3-系统美化\" class=\"headerlink\" title=\"3. 系统美化\"></a>3. 系统美化</h2><h2 id=\"来个配件大全\"><a href=\"#来个配件大全\" class=\"headerlink\" title=\"来个配件大全\"></a>来个配件大全</h2><h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>Application:<code>Arc</code></p>\n<p>Cursor:<code>Xcursor-breeze</code></p>\n<p>Icons:<code>Numix-Circle-Light</code></p>\n<p>Shell:<code>Adapta-Nokto-Eta-Maia</code></p>\n<h2 id=\"下面放美图\"><a href=\"#下面放美图\" class=\"headerlink\" title=\"下面放美图\"></a>下面放美图</h2><center><img src=\"/2018/03/23/manjaro配置及美化/1.png\" title=\"说明\"></center>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"manjaro-麻将-配置及美化\"><a href=\"#manjaro-麻将-配置及美化\" class=\"headerlink\" title=\"manjaro(麻将)配置及美化\"></a><center>manjaro(麻将)配置及美化</center></h1><p>manjaro是一款基于archlinux的linux发行版，以前主要用<code>ubuntu</code>系统的，主要用来使用CUDA的，在ubuntu上的安装过程十分痛苦，第一次使用manjaro,在其上的安装过程让我惊叹，这么好用呀，所以就迷上了这款系统。</p>\n<h2 id=\"1-系统安装\"><a href=\"#1-系统安装\" class=\"headerlink\" title=\"1. 系统安装\"></a>1. 系统安装</h2><ul>\n<li><p>在制作启动盘时，使用其他的启动盘制作都会无法进行安装，使用rufus这款软件，以DD模式写入才可以安装。</p>\n</li>\n<li><p>跟在ubuntu上的安装过程十分类似，都是图形界面的，但是有一点，注意要在win10的EFI分区(本机是/dev/sda2 上选择<code>/boot/efi</code>标记),其余都是类似的，点下一步就ok了</p>\n</li>\n</ul>\n<h2 id=\"2-系统更新及软件安装\"><a href=\"#2-系统更新及软件安装\" class=\"headerlink\" title=\"2.系统更新及软件安装\"></a>2.系统更新及软件安装</h2><h2 id=\"更换中国源\"><a href=\"#更换中国源\" class=\"headerlink\" title=\"更换中国源\"></a>更换中国源</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -b testing -c China  //选择中国源并更新  </span><br><span class=\"line\">sudo pacman -Syyu  //更新系统</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加源\"><a href=\"#添加源\" class=\"headerlink\" title=\"添加源\"></a>添加源</h2><p>打开终端输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure></p>\n<p>在文件底部加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustedOnly</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n<p>然后执行<br><code>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code><br>之后就可以从包管理器中搜索安装各种软件了enjoying，部分软件仍然需要配置，如搜狗输入法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx-sogoupinyin</span><br><span class=\"line\">sudo pacman -S fcitx-im  #全部安装</span><br><span class=\"line\">suao pacman -S fcitx-configtool  #图形化配置工具</span><br></pre></td></tr></table></figure></p>\n<p>需要设置输入法变量<br><code>sudo gedit ~/.profile(有可能是.xprofile)</code>,在其底部加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure></p>\n<p>另外一个安装是使用AUR源，首先安装yaourt</p>\n<p><code>sudo pacman -S yaourt</code></p>\n<p>修改<code>/etc/yaourtrc</code>,去掉<code># AURURL</code>的注释，修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AURURL=&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以使用AUR源了哟</p>\n<h2 id=\"3-系统美化\"><a href=\"#3-系统美化\" class=\"headerlink\" title=\"3. 系统美化\"></a>3. 系统美化</h2><h2 id=\"来个配件大全\"><a href=\"#来个配件大全\" class=\"headerlink\" title=\"来个配件大全\"></a>来个配件大全</h2><h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>Application:<code>Arc</code></p>\n<p>Cursor:<code>Xcursor-breeze</code></p>\n<p>Icons:<code>Numix-Circle-Light</code></p>\n<p>Shell:<code>Adapta-Nokto-Eta-Maia</code></p>\n<h2 id=\"下面放美图\"><a href=\"#下面放美图\" class=\"headerlink\" title=\"下面放美图\"></a>下面放美图</h2><center><img src=\"/2018/03/23/manjaro配置及美化/1.png\" title=\"说明\"></center>\n\n"},{"title":"python 学习笔记","date":"2017-11-18T05:46:18.000Z","_content":"# <center>学习笔记</center>\n### 1. <font color=\"#4590a3\" size = \"4px\">元组(tuple)</font>里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\n<center>{% asset_img 1.png 说明 %}</center>\n\n### 2. <font color=\"#4590a3\" size = \"4px\">if </font>语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\n``` python\nage = 20\nif age >= 6:\n    print('teenager')\nelif age >= 18:\n    print('adult')\nelse:\n    print('kid')\n```\n### 3.<font color=\"#4590a3\" size = \"4px\">循环 </font>我们可以轻易的实现一个100的求和。\n``` python\nsum=0\nfor i in range(101):\n    sum +=i\nprint(sum)\n```\n### 4.<font color=\"#4590a3\" size = \"4px\">字典 </font>dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\n\n``` python\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n```\n和list比较，dict有以下几个特点：\n\n查找和插入的速度极快，不会随着key的增加而变慢；\n\n需要占用大量的内存，内存浪费多。\n\n而list相反：\n\n查找和插入的时间随着元素的增加而增加；\n占用空间小，浪费内存很少。\n\n<font color=\"#4590a3\" size = \"4px\">Set(集合) </font> 也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。而且集合中的数据是无序的。\n``` python\n>>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n```\n<font color=\"#4590a3\" size = \"4px\">5 .Python中的Map函数 </font>  \n\n`map()`是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。\n``` python\ndef f(x):\n    return x*x\n\nprint map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n输出结果为：\n`[1, 4, 9, 10, 25, 36, 49, 64, 81]`\n\n<font color=\"red\" size = \"6px\">任务 </font>    \n&ensp;&ensp;&ensp;&ensp;假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：  输入：['adam', 'LISA', 'barT']  \n输出：['Adam', 'Lisa', 'Bart']\n\n``` python\ndef format_name(s):\n    # s=s[0].upper()+s[1:].lower()\n    # s=s.capitalize()\n    s=s.title()\n    return s\na=map(format_name,['adam','LISA','barT'])\nprint(list(a))\n```\n输出为：`['Adam', 'Lisa', 'Bart']`\n\n\n","source":"_posts/python笔记.md","raw":"---\ntitle: python 学习笔记\ndate: 2017-11-18 13:46:18\ntags: python基本知识\n---\n# <center>学习笔记</center>\n### 1. <font color=\"#4590a3\" size = \"4px\">元组(tuple)</font>里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\n<center>{% asset_img 1.png 说明 %}</center>\n\n### 2. <font color=\"#4590a3\" size = \"4px\">if </font>语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\n``` python\nage = 20\nif age >= 6:\n    print('teenager')\nelif age >= 18:\n    print('adult')\nelse:\n    print('kid')\n```\n### 3.<font color=\"#4590a3\" size = \"4px\">循环 </font>我们可以轻易的实现一个100的求和。\n``` python\nsum=0\nfor i in range(101):\n    sum +=i\nprint(sum)\n```\n### 4.<font color=\"#4590a3\" size = \"4px\">字典 </font>dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\n\n``` python\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n```\n和list比较，dict有以下几个特点：\n\n查找和插入的速度极快，不会随着key的增加而变慢；\n\n需要占用大量的内存，内存浪费多。\n\n而list相反：\n\n查找和插入的时间随着元素的增加而增加；\n占用空间小，浪费内存很少。\n\n<font color=\"#4590a3\" size = \"4px\">Set(集合) </font> 也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。而且集合中的数据是无序的。\n``` python\n>>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n```\n<font color=\"#4590a3\" size = \"4px\">5 .Python中的Map函数 </font>  \n\n`map()`是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。\n``` python\ndef f(x):\n    return x*x\n\nprint map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n输出结果为：\n`[1, 4, 9, 10, 25, 36, 49, 64, 81]`\n\n<font color=\"red\" size = \"6px\">任务 </font>    \n&ensp;&ensp;&ensp;&ensp;假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：  输入：['adam', 'LISA', 'barT']  \n输出：['Adam', 'Lisa', 'Bart']\n\n``` python\ndef format_name(s):\n    # s=s[0].upper()+s[1:].lower()\n    # s=s.capitalize()\n    s=s.title()\n    return s\na=map(format_name,['adam','LISA','barT'])\nprint(list(a))\n```\n输出为：`['Adam', 'Lisa', 'Bart']`\n\n\n","slug":"python笔记","published":1,"updated":"2017-11-19T12:27:20.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3mhqg60003v47xy9u9qyto","content":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a><center>学习笔记</center></h1><h3 id=\"1-元组-tuple-里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\"><a href=\"#1-元组-tuple-里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\" class=\"headerlink\" title=\"1. 元组(tuple)里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\"></a>1. <font color=\"#4590a3\" size=\"4px\">元组(tuple)</font>里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。</h3><center><img src=\"/2017/11/18/python笔记/1.png\" title=\"说明\"></center>\n\n<h3 id=\"2-if-语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\"><a href=\"#2-if-语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\" class=\"headerlink\" title=\"2. if 语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\"></a>2. <font color=\"#4590a3\" size=\"4px\">if </font>语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'kid'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-循环-我们可以轻易的实现一个100的求和。\"><a href=\"#3-循环-我们可以轻易的实现一个100的求和。\" class=\"headerlink\" title=\"3.循环 我们可以轻易的实现一个100的求和。\"></a>3.<font color=\"#4590a3\" size=\"4px\">循环 </font>我们可以轻易的实现一个100的求和。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</span><br><span class=\"line\">    sum +=i</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-字典-dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\"><a href=\"#4-字典-dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\" class=\"headerlink\" title=\"4.字典 dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\"></a>4.<font color=\"#4590a3\" size=\"4px\">字典 </font>dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Michael'</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n<p>和list比较，dict有以下几个特点：</p>\n<p>查找和插入的速度极快，不会随着key的增加而变慢；</p>\n<p>需要占用大量的内存，内存浪费多。</p>\n<p>而list相反：</p>\n<p>查找和插入的时间随着元素的增加而增加；<br>占用空间小，浪费内存很少。</p>\n<font color=\"#4590a3\" size=\"4px\">Set(集合) </font> 也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。而且集合中的数据是无序的。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure><br><br><font color=\"#4590a3\" size=\"4px\">5 .Python中的Map函数 </font>  \n\n<p><code>map()</code>是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><code>[1, 4, 9, 10, 25, 36, 49, 64, 81]</code></p>\n<p><font color=\"red\" size=\"6px\">任务 </font><br>&ensp;&ensp;&ensp;&ensp;假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：  输入：[‘adam’, ‘LISA’, ‘barT’]<br>输出：[‘Adam’, ‘Lisa’, ‘Bart’]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">format_name</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># s=s[0].upper()+s[1:].lower()</span></span><br><span class=\"line\">    <span class=\"comment\"># s=s.capitalize()</span></span><br><span class=\"line\">    s=s.title()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">a=map(format_name,[<span class=\"string\">'adam'</span>,<span class=\"string\">'LISA'</span>,<span class=\"string\">'barT'</span>])</span><br><span class=\"line\">print(list(a))</span><br></pre></td></tr></table></figure>\n<p>输出为：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a><center>学习笔记</center></h1><h3 id=\"1-元组-tuple-里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\"><a href=\"#1-元组-tuple-里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\" class=\"headerlink\" title=\"1. 元组(tuple)里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。\"></a>1. <font color=\"#4590a3\" size=\"4px\">元组(tuple)</font>里面的元素是不可以更改的，但是元组里面的列表中的元素是可以更改的。如下所示。</h3><center><img src=\"/2017/11/18/python笔记/1.png\" title=\"说明\"></center>\n\n<h3 id=\"2-if-语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\"><a href=\"#2-if-语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\" class=\"headerlink\" title=\"2. if 语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：\"></a>2. <font color=\"#4590a3\" size=\"4px\">if </font>语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else，所以，请测试并解释为什么下面的程序打印的是teenager：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'kid'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-循环-我们可以轻易的实现一个100的求和。\"><a href=\"#3-循环-我们可以轻易的实现一个100的求和。\" class=\"headerlink\" title=\"3.循环 我们可以轻易的实现一个100的求和。\"></a>3.<font color=\"#4590a3\" size=\"4px\">循环 </font>我们可以轻易的实现一个100的求和。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</span><br><span class=\"line\">    sum +=i</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-字典-dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\"><a href=\"#4-字典-dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\" class=\"headerlink\" title=\"4.字典 dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\"></a>4.<font color=\"#4590a3\" size=\"4px\">字典 </font>dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Michael'</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n<p>和list比较，dict有以下几个特点：</p>\n<p>查找和插入的速度极快，不会随着key的增加而变慢；</p>\n<p>需要占用大量的内存，内存浪费多。</p>\n<p>而list相反：</p>\n<p>查找和插入的时间随着元素的增加而增加；<br>占用空间小，浪费内存很少。</p>\n<font color=\"#4590a3\" size=\"4px\">Set(集合) </font> 也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。而且集合中的数据是无序的。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure><br><br><font color=\"#4590a3\" size=\"4px\">5 .Python中的Map函数 </font>  \n\n<p><code>map()</code>是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><code>[1, 4, 9, 10, 25, 36, 49, 64, 81]</code></p>\n<p><font color=\"red\" size=\"6px\">任务 </font><br>&ensp;&ensp;&ensp;&ensp;假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：  输入：[‘adam’, ‘LISA’, ‘barT’]<br>输出：[‘Adam’, ‘Lisa’, ‘Bart’]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">format_name</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># s=s[0].upper()+s[1:].lower()</span></span><br><span class=\"line\">    <span class=\"comment\"># s=s.capitalize()</span></span><br><span class=\"line\">    s=s.title()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">a=map(format_name,[<span class=\"string\">'adam'</span>,<span class=\"string\">'LISA'</span>,<span class=\"string\">'barT'</span>])</span><br><span class=\"line\">print(list(a))</span><br></pre></td></tr></table></figure>\n<p>输出为：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></p>\n"},{"title":"数据库","date":"2018-03-15T02:36:49.000Z","_content":"# <center>数据库学习</center>\n\n## 1.建立一个新库\n`create database db1;`\n\n注意有冒号的\n```mysql\nmysql> create database db1;\nQuery OK, 1 row affected (0.00 sec)\n```\n\n## 2.查看现有库\n`show databases;`有冒号，复数形式\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| db1                |\n| mysql              |\n| performance_schema |\n| sakila             |\n| sys                |\n| world              |\n+--------------------+\n7 rows in set (0.00 sec)\n```\n## 3.销毁一个库\n\n`drop datebase db1;`再显示为\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sakila             |\n| sys                |\n| world              |\n+--------------------+\n6 rows in set (0.00 sec)\n```\n接续\n\n\n\n\n\n\n","source":"_posts/数据库.md","raw":"---\ntitle: 数据库\ndate: 2018-03-15 10:36:49\ntags:\n---\n# <center>数据库学习</center>\n\n## 1.建立一个新库\n`create database db1;`\n\n注意有冒号的\n```mysql\nmysql> create database db1;\nQuery OK, 1 row affected (0.00 sec)\n```\n\n## 2.查看现有库\n`show databases;`有冒号，复数形式\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| db1                |\n| mysql              |\n| performance_schema |\n| sakila             |\n| sys                |\n| world              |\n+--------------------+\n7 rows in set (0.00 sec)\n```\n## 3.销毁一个库\n\n`drop datebase db1;`再显示为\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sakila             |\n| sys                |\n| world              |\n+--------------------+\n6 rows in set (0.00 sec)\n```\n接续\n\n\n\n\n\n\n","slug":"数据库","published":1,"updated":"2018-03-24T07:29:24.297Z","_id":"cjf3mhqgg0006v47x3xgmj90k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据库学习\"><a href=\"#数据库学习\" class=\"headerlink\" title=\"数据库学习\"></a><center>数据库学习</center></h1><h2 id=\"1-建立一个新库\"><a href=\"#1-建立一个新库\" class=\"headerlink\" title=\"1.建立一个新库\"></a>1.建立一个新库</h2><p><code>create database db1;</code></p>\n<p>注意有冒号的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database db1;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-查看现有库\"><a href=\"#2-查看现有库\" class=\"headerlink\" title=\"2.查看现有库\"></a>2.查看现有库</h2><p><code>show databases;</code>有冒号，复数形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| db1                |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sakila             |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">| world              |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-销毁一个库\"><a href=\"#3-销毁一个库\" class=\"headerlink\" title=\"3.销毁一个库\"></a>3.销毁一个库</h2><p><code>drop datebase db1;</code>再显示为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sakila             |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">| world              |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>接续</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据库学习\"><a href=\"#数据库学习\" class=\"headerlink\" title=\"数据库学习\"></a><center>数据库学习</center></h1><h2 id=\"1-建立一个新库\"><a href=\"#1-建立一个新库\" class=\"headerlink\" title=\"1.建立一个新库\"></a>1.建立一个新库</h2><p><code>create database db1;</code></p>\n<p>注意有冒号的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database db1;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-查看现有库\"><a href=\"#2-查看现有库\" class=\"headerlink\" title=\"2.查看现有库\"></a>2.查看现有库</h2><p><code>show databases;</code>有冒号，复数形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| db1                |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sakila             |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">| world              |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-销毁一个库\"><a href=\"#3-销毁一个库\" class=\"headerlink\" title=\"3.销毁一个库\"></a>3.销毁一个库</h2><p><code>drop datebase db1;</code>再显示为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sakila             |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">| world              |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>接续</p>\n"},{"title":"Argparse 笔记","date":"2017-11-19T03:54:58.000Z","_content":"## <center>1.Argparse学习笔记</center>\n### 在学习python的时候，经常遇到下面的语句。\n```python\nimport argparse\n\nif __name__== \"__main__\":\n    parser=argparse.ArgumentParser()\n    parser.add_argument('--number1',help='第一个数字')\n    parser.add_argument('--number2',help='第二个数字')\n    parser.add_argument('--operation',help='操作符')\n\n    args=parser.parse_args()\n```\n<font color='red' size=3px>这些是什么呢？</font>  我们来看下定义，argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。argparse模块的作用是用于解析命令行参数，例如python parseTest.py input.txt output.txt --user=name --port=8080。\n\n\n## <font color=\"#4590a3\" size=4px>第一步设置一个解析器</font>\n* 使用argparse的第一步就是创建一个解析器对象，并告诉它将会有些什么参数。那么当你的程序运行时，该解析器就可以用于处理命令行参数。解析器类是 ArgumentParser 。构造方法接收几个参数来设置用于程序帮助文本的描述信息以及其他全局的行为或设置。\n\n* `parser=argparse.ArgumentParser()` 这句代码用来设置解析器\n## <font color=\"#4590a3\" size=4px>第二步 定义参数</font>\n``` python\nparser.add_argument('--number1',help='第一个数字')\nparser.add_argument('--number2',help='第二个数字')\nparser.add_argument('--operation',help='操作符')\n```\n这里添加参数，我们来看下运行结果\n``` python\nimport argparse\n\nif __name__== \"__main__\":\n    parser=argparse.ArgumentParser()\n    parser.add_argument('number1',help='第一个数字')\n    parser.add_argument('number2',help='第二个数字')\n    parser.add_argument('operation',help='操作符')\n\n    args=parser.parse_args()\n\n    print(args.number1)\n    print(args.number2)\n    print(args.operation)\n\n    n1=int(args.number1)\n    n2=int(args.number2)\n    result=None\n    if args.operation == \"+\":\n        print('结果是：%d'%(n1+n2))\n```\n输入命令`python demo.py -h`\n``` shell\nusage: fmt output.py [-h] number1 number2 operation\n\npositional arguments:\n  number1     第一个数字\n  number2     第二个数字\n  operation   操作符\n```\n输入命令 `pthon demo 2 5 +`,结果为：\n```\n2\n5\n+\n结果是：7\n```\n将上述源码做一下改动\n```python\nparser.add_argument('--number1',help='第一个数字')\nparser.add_argument('--number2',help='第二个数字')\nparser.add_argument('--operation',help='操作符')\n```\n输入命令`python demo.py -h`\n```\nusage: fmt output.py [-h] [--number1 NUMBER1] [--number2 NUMBER2]\n                     [--operation OPERATION]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --number1 NUMBER1     第一个数字\n  --number2 NUMBER2     第二个数字\n  --operation OPERATION   操作符\n```\n* 我们可以看到不一致，此时的调用可以采用`python demo --number 2 --number 5 --operation +`来输入\n\n## <center>2.这是第二次写Argparse这个模块，Anyway，那就写的深入点吧</center>\n* 今天我们这里主要来讲`add_argument() `这个方法，这也是Argparse这个模块里面使用最多的方法。\n\n### 2.1 Name或者flags参数\n我们使用`add_argument() `来创建新的参数的时候，必须知道新的参数是位置参数还是可选参数，以及参数是否使用缩写。当我们创建位置参数时，可以创建如下。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('inter')\nargs=parser.parse_args()\n\nprint(args.inter)\n```\n然后输入命令\n```shell\npython argp.py 12\n```\n传进去的参数12，就被赋给了`inter`,随后被打印出来。\n```\nPS E:\\codeme\\python learn\\VS code\\python basic> python .\\argp.py -i 12\n12\n```\n\n接下来我们看，如何创建一个可选参数\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter')\nargs=parser.parse_args()\n\nprint(args.inter)\n```\n这时的命令该怎么输呢？\n```\npython argp.py --inter 12\n```\n这样就可以了，之所以称其为可选参数，是因为如果你不传递参数进去，程序也不会报错，而之前的位置参数，当不传递参数进去时，就会报错了。`--inter`显然有些麻烦，那如何简写呢？\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('-i','--inter')\nargs=parser.parse_args()\n\nprint(args.inter)\n```\n这样输入\n``` shell\npython argp.py -i 12\n```\n就仍然达到传递参数12进去的效果了。这就说明可选参数以`'-'`来表明，而其他的参数被认为是位置参数了。\n\n### 2.2 action参数\n`action` 关键字指出应该如何处理命令行参数\n\n`'store'`只是保存参数，是默认的值\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter')\nargs=parser.parse_args(['--inter','12'])\n\nprint(args.inter)\n```\n输出为 `12`\n\n`'store_const'`保存const关键字指出的值\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',action='store_const',const=23)\nargs=parser.parse_args(['--inter'])\n\nprint(args.inter)\n```\n输出为 `23`\n\n`'store_true'`和`'store_false'` - 它们是`'store_const'`的特殊情形，分别用于保存值True和False\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',action='store_true')\nparser.add_argument('--float',action='store_false')\nparser.add_argument('--double',action='store_false')\n\n\nargs=parser.parse_args(['--inter','--float'])\n\nprint(args.inter,args.float,args.double)\n```\n输出 `True False True`\n\n`'append'` - 保存一个列表，并将每个参数值附加在列表的后面。这对于允许指定多次的选项很有帮助。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',action='append')\nargs=parser.parse_args(['--inter','12','--inter','45'])\n\nprint(args.inter)\n```\n这里由于`--inter`可以调用多次，将后面的数字加到其列表里，所以输出为`['12', '45']`\n\n`'append_const'` - 保存一个列表，并将const关键字参数指出的值附加在列表的后面。（注意const关键字参数默认是None。）`'append_const'` 动作在多个参数需要保存常量到相同的列表时特别有用。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',dest='types',action='append_const',const=int)\nparser.add_argument('--float',dest='types',action='append_const',const=float)\n\nargs=parser.parse_args(['--inter','--float'])\n\nprint(args.types)\n```\n输出 `[<class 'int'>, <class 'float'>]`\n\n`'count'` - 计算关键字参数出现的次数\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter','-i',action='count')\n\n\nargs=parser.parse_args(['-iii'])\n\nprint(args.inter)\nargs=parser.parse_args(['-iiiiii'])\nprint(args.inter)\n```\n输出为 `3 6`\n### 2.3 nargs参数\n`nargs`关键字参数将一个动作(`action`)与不同数目的命令行参数关联在一起。\n\n> 它的值首先可以是一个整数 **`N`**\n\n* 我们先来看一个默认的情况, 没有nargs参数：\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo')\nargs=parser.parse_args()\n\nprint(args.foo)\n```\n运行命令\n```\npython args.py --foo 2\n```\n结果为 **`2`**\n\n* 再来看一个具有nargs参数的情况  \n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo',nargs=2)\nargs=parser.parse_args()\n\nprint(args.foo)\n```\n这里 `nargs=2` ,规定可以传递两个参数\n```\npython args.py --foo 2 3\n```\n来看一下输出\n`['2', '3']`,是一个列表，而之前的是元素本身。\n\n> `nargs`的值可以是 **`？`**,如果有的话就从命令行读取一个参数并生成一个元素。如果没有对应的命令行参数，则产生一个来自default的值。注意，对于可选参数，有另外一种情况 - 有选项字符串但是后面没有跟随命令行参数。在这种情况下，将生成一个来自const的值\n\n* 来看一个有参数的情况\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo',nargs=\"?\")\nargs=parser.parse_args()\n\nprint(args.foo)\n```\n运行命令\n```\npython args.py --foo 2\n```\n结果为 **`2`**\n\n* 没有参数时\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo',nargs=\"?\",default='2',const='3')\nparser.add_argument('int',nargs='?',default='z')\nargs=parser.parse_args()\n\nprint(args.foo,args.int)\n```\n运行命令\n```\npython args.py\n```\n输出 **`2 z`**\n\n运行命令\n```\npython args.py y --foo\n```\n输出 **`3 y`**\n\n运行命令\n```\npython args.py y --foo 5\n```\n输出 **`5 y`**\n\n> `nargs`的值可以是 `*`和 `+`, 出现的所有命令行参数都被收集到一个列表中。注意，一般情况下具有多个带有 `nargs='*'`的位置参数是不合理的，但是多个带有 `nargs='*' `的可选参数是可能的。`+`的情况下，如果没有至少出现一个命令行参数将会产生一个错误信息，`*`不会产生这个问题。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo', nargs='*')\nparser.add_argument('--bar', nargs='*')\nparser.add_argument('baz', nargs='*')\nargs=parser.parse_args()\nprint('args.foo=%6s'%args.foo,'args.bar=%6s'%args.bar,'args.baz=%6s'%args.baz,sep='\\n')\n```\n运行命令\n```\npython args.py a b --foo 2 3 --bar z s\n```\n输出\n\n`args.foo=['2', '3']`\n\n`args.bar=['z', 's']`\n\n`args.baz=['a', 'b']`\n\n> 如果没有提供 `nargs`关键字参数，读取的参数个数取决于`action`。通常这意味着将读取一个命令行参数并产生一个元素（不是一个列表）。\n","source":"_posts/Argparse-笔记.md","raw":"---\ntitle: Argparse 笔记\ndate: 2017-11-19 11:54:58\ntags:\n---\n## <center>1.Argparse学习笔记</center>\n### 在学习python的时候，经常遇到下面的语句。\n```python\nimport argparse\n\nif __name__== \"__main__\":\n    parser=argparse.ArgumentParser()\n    parser.add_argument('--number1',help='第一个数字')\n    parser.add_argument('--number2',help='第二个数字')\n    parser.add_argument('--operation',help='操作符')\n\n    args=parser.parse_args()\n```\n<font color='red' size=3px>这些是什么呢？</font>  我们来看下定义，argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。argparse模块的作用是用于解析命令行参数，例如python parseTest.py input.txt output.txt --user=name --port=8080。\n\n\n## <font color=\"#4590a3\" size=4px>第一步设置一个解析器</font>\n* 使用argparse的第一步就是创建一个解析器对象，并告诉它将会有些什么参数。那么当你的程序运行时，该解析器就可以用于处理命令行参数。解析器类是 ArgumentParser 。构造方法接收几个参数来设置用于程序帮助文本的描述信息以及其他全局的行为或设置。\n\n* `parser=argparse.ArgumentParser()` 这句代码用来设置解析器\n## <font color=\"#4590a3\" size=4px>第二步 定义参数</font>\n``` python\nparser.add_argument('--number1',help='第一个数字')\nparser.add_argument('--number2',help='第二个数字')\nparser.add_argument('--operation',help='操作符')\n```\n这里添加参数，我们来看下运行结果\n``` python\nimport argparse\n\nif __name__== \"__main__\":\n    parser=argparse.ArgumentParser()\n    parser.add_argument('number1',help='第一个数字')\n    parser.add_argument('number2',help='第二个数字')\n    parser.add_argument('operation',help='操作符')\n\n    args=parser.parse_args()\n\n    print(args.number1)\n    print(args.number2)\n    print(args.operation)\n\n    n1=int(args.number1)\n    n2=int(args.number2)\n    result=None\n    if args.operation == \"+\":\n        print('结果是：%d'%(n1+n2))\n```\n输入命令`python demo.py -h`\n``` shell\nusage: fmt output.py [-h] number1 number2 operation\n\npositional arguments:\n  number1     第一个数字\n  number2     第二个数字\n  operation   操作符\n```\n输入命令 `pthon demo 2 5 +`,结果为：\n```\n2\n5\n+\n结果是：7\n```\n将上述源码做一下改动\n```python\nparser.add_argument('--number1',help='第一个数字')\nparser.add_argument('--number2',help='第二个数字')\nparser.add_argument('--operation',help='操作符')\n```\n输入命令`python demo.py -h`\n```\nusage: fmt output.py [-h] [--number1 NUMBER1] [--number2 NUMBER2]\n                     [--operation OPERATION]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --number1 NUMBER1     第一个数字\n  --number2 NUMBER2     第二个数字\n  --operation OPERATION   操作符\n```\n* 我们可以看到不一致，此时的调用可以采用`python demo --number 2 --number 5 --operation +`来输入\n\n## <center>2.这是第二次写Argparse这个模块，Anyway，那就写的深入点吧</center>\n* 今天我们这里主要来讲`add_argument() `这个方法，这也是Argparse这个模块里面使用最多的方法。\n\n### 2.1 Name或者flags参数\n我们使用`add_argument() `来创建新的参数的时候，必须知道新的参数是位置参数还是可选参数，以及参数是否使用缩写。当我们创建位置参数时，可以创建如下。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('inter')\nargs=parser.parse_args()\n\nprint(args.inter)\n```\n然后输入命令\n```shell\npython argp.py 12\n```\n传进去的参数12，就被赋给了`inter`,随后被打印出来。\n```\nPS E:\\codeme\\python learn\\VS code\\python basic> python .\\argp.py -i 12\n12\n```\n\n接下来我们看，如何创建一个可选参数\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter')\nargs=parser.parse_args()\n\nprint(args.inter)\n```\n这时的命令该怎么输呢？\n```\npython argp.py --inter 12\n```\n这样就可以了，之所以称其为可选参数，是因为如果你不传递参数进去，程序也不会报错，而之前的位置参数，当不传递参数进去时，就会报错了。`--inter`显然有些麻烦，那如何简写呢？\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('-i','--inter')\nargs=parser.parse_args()\n\nprint(args.inter)\n```\n这样输入\n``` shell\npython argp.py -i 12\n```\n就仍然达到传递参数12进去的效果了。这就说明可选参数以`'-'`来表明，而其他的参数被认为是位置参数了。\n\n### 2.2 action参数\n`action` 关键字指出应该如何处理命令行参数\n\n`'store'`只是保存参数，是默认的值\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter')\nargs=parser.parse_args(['--inter','12'])\n\nprint(args.inter)\n```\n输出为 `12`\n\n`'store_const'`保存const关键字指出的值\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',action='store_const',const=23)\nargs=parser.parse_args(['--inter'])\n\nprint(args.inter)\n```\n输出为 `23`\n\n`'store_true'`和`'store_false'` - 它们是`'store_const'`的特殊情形，分别用于保存值True和False\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',action='store_true')\nparser.add_argument('--float',action='store_false')\nparser.add_argument('--double',action='store_false')\n\n\nargs=parser.parse_args(['--inter','--float'])\n\nprint(args.inter,args.float,args.double)\n```\n输出 `True False True`\n\n`'append'` - 保存一个列表，并将每个参数值附加在列表的后面。这对于允许指定多次的选项很有帮助。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',action='append')\nargs=parser.parse_args(['--inter','12','--inter','45'])\n\nprint(args.inter)\n```\n这里由于`--inter`可以调用多次，将后面的数字加到其列表里，所以输出为`['12', '45']`\n\n`'append_const'` - 保存一个列表，并将const关键字参数指出的值附加在列表的后面。（注意const关键字参数默认是None。）`'append_const'` 动作在多个参数需要保存常量到相同的列表时特别有用。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter',dest='types',action='append_const',const=int)\nparser.add_argument('--float',dest='types',action='append_const',const=float)\n\nargs=parser.parse_args(['--inter','--float'])\n\nprint(args.types)\n```\n输出 `[<class 'int'>, <class 'float'>]`\n\n`'count'` - 计算关键字参数出现的次数\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--inter','-i',action='count')\n\n\nargs=parser.parse_args(['-iii'])\n\nprint(args.inter)\nargs=parser.parse_args(['-iiiiii'])\nprint(args.inter)\n```\n输出为 `3 6`\n### 2.3 nargs参数\n`nargs`关键字参数将一个动作(`action`)与不同数目的命令行参数关联在一起。\n\n> 它的值首先可以是一个整数 **`N`**\n\n* 我们先来看一个默认的情况, 没有nargs参数：\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo')\nargs=parser.parse_args()\n\nprint(args.foo)\n```\n运行命令\n```\npython args.py --foo 2\n```\n结果为 **`2`**\n\n* 再来看一个具有nargs参数的情况  \n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo',nargs=2)\nargs=parser.parse_args()\n\nprint(args.foo)\n```\n这里 `nargs=2` ,规定可以传递两个参数\n```\npython args.py --foo 2 3\n```\n来看一下输出\n`['2', '3']`,是一个列表，而之前的是元素本身。\n\n> `nargs`的值可以是 **`？`**,如果有的话就从命令行读取一个参数并生成一个元素。如果没有对应的命令行参数，则产生一个来自default的值。注意，对于可选参数，有另外一种情况 - 有选项字符串但是后面没有跟随命令行参数。在这种情况下，将生成一个来自const的值\n\n* 来看一个有参数的情况\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo',nargs=\"?\")\nargs=parser.parse_args()\n\nprint(args.foo)\n```\n运行命令\n```\npython args.py --foo 2\n```\n结果为 **`2`**\n\n* 没有参数时\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo',nargs=\"?\",default='2',const='3')\nparser.add_argument('int',nargs='?',default='z')\nargs=parser.parse_args()\n\nprint(args.foo,args.int)\n```\n运行命令\n```\npython args.py\n```\n输出 **`2 z`**\n\n运行命令\n```\npython args.py y --foo\n```\n输出 **`3 y`**\n\n运行命令\n```\npython args.py y --foo 5\n```\n输出 **`5 y`**\n\n> `nargs`的值可以是 `*`和 `+`, 出现的所有命令行参数都被收集到一个列表中。注意，一般情况下具有多个带有 `nargs='*'`的位置参数是不合理的，但是多个带有 `nargs='*' `的可选参数是可能的。`+`的情况下，如果没有至少出现一个命令行参数将会产生一个错误信息，`*`不会产生这个问题。\n```python\nimport argparse\n\nparser=argparse.ArgumentParser()\nparser.add_argument('--foo', nargs='*')\nparser.add_argument('--bar', nargs='*')\nparser.add_argument('baz', nargs='*')\nargs=parser.parse_args()\nprint('args.foo=%6s'%args.foo,'args.bar=%6s'%args.bar,'args.baz=%6s'%args.baz,sep='\\n')\n```\n运行命令\n```\npython args.py a b --foo 2 3 --bar z s\n```\n输出\n\n`args.foo=['2', '3']`\n\n`args.bar=['z', 's']`\n\n`args.baz=['a', 'b']`\n\n> 如果没有提供 `nargs`关键字参数，读取的参数个数取决于`action`。通常这意味着将读取一个命令行参数并产生一个元素（不是一个列表）。\n","slug":"Argparse-笔记","published":1,"updated":"2017-12-17T03:27:12.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3mhqgh0007v47xn2id695q","content":"<h2 id=\"1-Argparse学习笔记\"><a href=\"#1-Argparse学习笔记\" class=\"headerlink\" title=\"1.Argparse学习笔记\"></a><center>1.Argparse学习笔记</center></h2><h3 id=\"在学习python的时候，经常遇到下面的语句。\"><a href=\"#在学习python的时候，经常遇到下面的语句。\" class=\"headerlink\" title=\"在学习python的时候，经常遇到下面的语句。\"></a>在学习python的时候，经常遇到下面的语句。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__== <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser=argparse.ArgumentParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    args=parser.parse_args()</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\" size=\"3px\">这些是什么呢？</font>  我们来看下定义，argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。argparse模块的作用是用于解析命令行参数，例如python parseTest.py input.txt output.txt –user=name –port=8080。</p>\n<h2 id=\"第一步设置一个解析器\"><a href=\"#第一步设置一个解析器\" class=\"headerlink\" title=\"第一步设置一个解析器\"></a><font color=\"#4590a3\" size=\"4px\">第一步设置一个解析器</font></h2><ul>\n<li><p>使用argparse的第一步就是创建一个解析器对象，并告诉它将会有些什么参数。那么当你的程序运行时，该解析器就可以用于处理命令行参数。解析器类是 ArgumentParser 。构造方法接收几个参数来设置用于程序帮助文本的描述信息以及其他全局的行为或设置。</p>\n</li>\n<li><p><code>parser=argparse.ArgumentParser()</code> 这句代码用来设置解析器</p>\n<h2 id=\"第二步-定义参数\"><a href=\"#第二步-定义参数\" class=\"headerlink\" title=\"第二步 定义参数\"></a><font color=\"#4590a3\" size=\"4px\">第二步 定义参数</font></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">'--number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里添加参数，我们来看下运行结果<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__== <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser=argparse.ArgumentParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(args.number1)</span><br><span class=\"line\">    print(args.number2)</span><br><span class=\"line\">    print(args.operation)</span><br><span class=\"line\"></span><br><span class=\"line\">    n1=int(args.number1)</span><br><span class=\"line\">    n2=int(args.number2)</span><br><span class=\"line\">    result=<span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.operation == <span class=\"string\">\"+\"</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'结果是：%d'</span>%(n1+n2))</span><br></pre></td></tr></table></figure></p>\n<p>输入命令<code>python demo.py -h</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: fmt output.py [-h] number1 number2 operation</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  number1     第一个数字</span><br><span class=\"line\">  number2     第二个数字</span><br><span class=\"line\">  operation   操作符</span><br></pre></td></tr></table></figure></p>\n<p>输入命令 <code>pthon demo 2 5 +</code>,结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5</span><br><span class=\"line\">+</span><br><span class=\"line\">结果是：7</span><br></pre></td></tr></table></figure></p>\n<p>将上述源码做一下改动<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">'--number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>输入命令<code>python demo.py -h</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: fmt output.py [-h] [--number1 NUMBER1] [--number2 NUMBER2]</span><br><span class=\"line\">                     [--operation OPERATION]</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --number1 NUMBER1     第一个数字</span><br><span class=\"line\">  --number2 NUMBER2     第二个数字</span><br><span class=\"line\">  --operation OPERATION   操作符</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们可以看到不一致，此时的调用可以采用<code>python demo --number 2 --number 5 --operation +</code>来输入</li>\n</ul>\n<h2 id=\"2-这是第二次写Argparse这个模块，Anyway，那就写的深入点吧\"><a href=\"#2-这是第二次写Argparse这个模块，Anyway，那就写的深入点吧\" class=\"headerlink\" title=\"2.这是第二次写Argparse这个模块，Anyway，那就写的深入点吧\"></a><center>2.这是第二次写Argparse这个模块，Anyway，那就写的深入点吧</center></h2><ul>\n<li>今天我们这里主要来讲<code>add_argument()</code>这个方法，这也是Argparse这个模块里面使用最多的方法。</li>\n</ul>\n<h3 id=\"2-1-Name或者flags参数\"><a href=\"#2-1-Name或者flags参数\" class=\"headerlink\" title=\"2.1 Name或者flags参数\"></a>2.1 Name或者flags参数</h3><p>我们使用<code>add_argument()</code>来创建新的参数的时候，必须知道新的参数是位置参数还是可选参数，以及参数是否使用缩写。当我们创建位置参数时，可以创建如下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'inter'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>然后输入命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python argp.py 12</span><br></pre></td></tr></table></figure></p>\n<p>传进去的参数12，就被赋给了<code>inter</code>,随后被打印出来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\codeme\\python learn\\VS code\\python basic&gt; python .\\argp.py -i 12</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们看，如何创建一个可选参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>这时的命令该怎么输呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python argp.py --inter 12</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以了，之所以称其为可选参数，是因为如果你不传递参数进去，程序也不会报错，而之前的位置参数，当不传递参数进去时，就会报错了。<code>--inter</code>显然有些麻烦，那如何简写呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'-i'</span>,<span class=\"string\">'--inter'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>这样输入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python argp.py -i 12</span><br></pre></td></tr></table></figure></p>\n<p>就仍然达到传递参数12进去的效果了。这就说明可选参数以<code>&#39;-&#39;</code>来表明，而其他的参数被认为是位置参数了。</p>\n<h3 id=\"2-2-action参数\"><a href=\"#2-2-action参数\" class=\"headerlink\" title=\"2.2 action参数\"></a>2.2 action参数</h3><p><code>action</code> 关键字指出应该如何处理命令行参数</p>\n<p><code>&#39;store&#39;</code>只是保存参数，是默认的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'12'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>输出为 <code>12</code></p>\n<p><code>&#39;store_const&#39;</code>保存const关键字指出的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,action=<span class=\"string\">'store_const'</span>,const=<span class=\"number\">23</span>)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>输出为 <code>23</code></p>\n<p><code>&#39;store_true&#39;</code>和<code>&#39;store_false&#39;</code> - 它们是<code>&#39;store_const&#39;</code>的特殊情形，分别用于保存值True和False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,action=<span class=\"string\">'store_true'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--float'</span>,action=<span class=\"string\">'store_false'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--double'</span>,action=<span class=\"string\">'store_false'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'--float'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter,args.float,args.double)</span><br></pre></td></tr></table></figure></p>\n<p>输出 <code>True False True</code></p>\n<p><code>&#39;append&#39;</code> - 保存一个列表，并将每个参数值附加在列表的后面。这对于允许指定多次的选项很有帮助。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,action=<span class=\"string\">'append'</span>)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'12'</span>,<span class=\"string\">'--inter'</span>,<span class=\"string\">'45'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>这里由于<code>--inter</code>可以调用多次，将后面的数字加到其列表里，所以输出为<code>[&#39;12&#39;, &#39;45&#39;]</code></p>\n<p><code>&#39;append_const&#39;</code> - 保存一个列表，并将const关键字参数指出的值附加在列表的后面。（注意const关键字参数默认是None。）<code>&#39;append_const&#39;</code> 动作在多个参数需要保存常量到相同的列表时特别有用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,dest=<span class=\"string\">'types'</span>,action=<span class=\"string\">'append_const'</span>,const=int)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--float'</span>,dest=<span class=\"string\">'types'</span>,action=<span class=\"string\">'append_const'</span>,const=float)</span><br><span class=\"line\"></span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'--float'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.types)</span><br></pre></td></tr></table></figure></p>\n<p>输出 <code>[&lt;class &#39;int&#39;&gt;, &lt;class &#39;float&#39;&gt;]</code></p>\n<p><code>&#39;count&#39;</code> - 计算关键字参数出现的次数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,<span class=\"string\">'-i'</span>,action=<span class=\"string\">'count'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'-iii'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'-iiiiii'</span>])</span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>输出为 <code>3 6</code></p>\n<h3 id=\"2-3-nargs参数\"><a href=\"#2-3-nargs参数\" class=\"headerlink\" title=\"2.3 nargs参数\"></a>2.3 nargs参数</h3><p><code>nargs</code>关键字参数将一个动作(<code>action</code>)与不同数目的命令行参数关联在一起。</p>\n<blockquote>\n<p>它的值首先可以是一个整数 <strong><code>N</code></strong></p>\n</blockquote>\n<ul>\n<li>我们先来看一个默认的情况, 没有nargs参数：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py --foo 2</span><br></pre></td></tr></table></figure></p>\n<p>结果为 <strong><code>2</code></strong></p>\n<ul>\n<li>再来看一个具有nargs参数的情况  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>,nargs=<span class=\"number\">2</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里 <code>nargs=2</code> ,规定可以传递两个参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py --foo 2 3</span><br></pre></td></tr></table></figure></p>\n<p>来看一下输出<br><code>[&#39;2&#39;, &#39;3&#39;]</code>,是一个列表，而之前的是元素本身。</p>\n<blockquote>\n<p><code>nargs</code>的值可以是 <strong><code>？</code></strong>,如果有的话就从命令行读取一个参数并生成一个元素。如果没有对应的命令行参数，则产生一个来自default的值。注意，对于可选参数，有另外一种情况 - 有选项字符串但是后面没有跟随命令行参数。在这种情况下，将生成一个来自const的值</p>\n</blockquote>\n<ul>\n<li>来看一个有参数的情况<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>,nargs=<span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py --foo 2</span><br></pre></td></tr></table></figure></p>\n<p>结果为 <strong><code>2</code></strong></p>\n<ul>\n<li>没有参数时<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>,nargs=<span class=\"string\">\"?\"</span>,default=<span class=\"string\">'2'</span>,const=<span class=\"string\">'3'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'int'</span>,nargs=<span class=\"string\">'?'</span>,default=<span class=\"string\">'z'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo,args.int)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py</span><br></pre></td></tr></table></figure></p>\n<p>输出 <strong><code>2 z</code></strong></p>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py y --foo</span><br></pre></td></tr></table></figure></p>\n<p>输出 <strong><code>3 y</code></strong></p>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py y --foo 5</span><br></pre></td></tr></table></figure></p>\n<p>输出 <strong><code>5 y</code></strong></p>\n<blockquote>\n<p><code>nargs</code>的值可以是 <code>*</code>和 <code>+</code>, 出现的所有命令行参数都被收集到一个列表中。注意，一般情况下具有多个带有 <code>nargs=&#39;*&#39;</code>的位置参数是不合理的，但是多个带有 <code>nargs=&#39;*&#39;</code>的可选参数是可能的。<code>+</code>的情况下，如果没有至少出现一个命令行参数将会产生一个错误信息，<code>*</code>不会产生这个问题。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>, nargs=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--bar'</span>, nargs=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'baz'</span>, nargs=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\">print(<span class=\"string\">'args.foo=%6s'</span>%args.foo,<span class=\"string\">'args.bar=%6s'</span>%args.bar,<span class=\"string\">'args.baz=%6s'</span>%args.baz,sep=<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py a b --foo 2 3 --bar z s</span><br></pre></td></tr></table></figure></p>\n<p>输出</p>\n<p><code>args.foo=[&#39;2&#39;, &#39;3&#39;]</code></p>\n<p><code>args.bar=[&#39;z&#39;, &#39;s&#39;]</code></p>\n<p><code>args.baz=[&#39;a&#39;, &#39;b&#39;]</code></p>\n<blockquote>\n<p>如果没有提供 <code>nargs</code>关键字参数，读取的参数个数取决于<code>action</code>。通常这意味着将读取一个命令行参数并产生一个元素（不是一个列表）。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Argparse学习笔记\"><a href=\"#1-Argparse学习笔记\" class=\"headerlink\" title=\"1.Argparse学习笔记\"></a><center>1.Argparse学习笔记</center></h2><h3 id=\"在学习python的时候，经常遇到下面的语句。\"><a href=\"#在学习python的时候，经常遇到下面的语句。\" class=\"headerlink\" title=\"在学习python的时候，经常遇到下面的语句。\"></a>在学习python的时候，经常遇到下面的语句。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__== <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser=argparse.ArgumentParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    args=parser.parse_args()</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\" size=\"3px\">这些是什么呢？</font>  我们来看下定义，argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。argparse模块的作用是用于解析命令行参数，例如python parseTest.py input.txt output.txt –user=name –port=8080。</p>\n<h2 id=\"第一步设置一个解析器\"><a href=\"#第一步设置一个解析器\" class=\"headerlink\" title=\"第一步设置一个解析器\"></a><font color=\"#4590a3\" size=\"4px\">第一步设置一个解析器</font></h2><ul>\n<li><p>使用argparse的第一步就是创建一个解析器对象，并告诉它将会有些什么参数。那么当你的程序运行时，该解析器就可以用于处理命令行参数。解析器类是 ArgumentParser 。构造方法接收几个参数来设置用于程序帮助文本的描述信息以及其他全局的行为或设置。</p>\n</li>\n<li><p><code>parser=argparse.ArgumentParser()</code> 这句代码用来设置解析器</p>\n<h2 id=\"第二步-定义参数\"><a href=\"#第二步-定义参数\" class=\"headerlink\" title=\"第二步 定义参数\"></a><font color=\"#4590a3\" size=\"4px\">第二步 定义参数</font></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">'--number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里添加参数，我们来看下运行结果<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__== <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser=argparse.ArgumentParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(args.number1)</span><br><span class=\"line\">    print(args.number2)</span><br><span class=\"line\">    print(args.operation)</span><br><span class=\"line\"></span><br><span class=\"line\">    n1=int(args.number1)</span><br><span class=\"line\">    n2=int(args.number2)</span><br><span class=\"line\">    result=<span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.operation == <span class=\"string\">\"+\"</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'结果是：%d'</span>%(n1+n2))</span><br></pre></td></tr></table></figure></p>\n<p>输入命令<code>python demo.py -h</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: fmt output.py [-h] number1 number2 operation</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  number1     第一个数字</span><br><span class=\"line\">  number2     第二个数字</span><br><span class=\"line\">  operation   操作符</span><br></pre></td></tr></table></figure></p>\n<p>输入命令 <code>pthon demo 2 5 +</code>,结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5</span><br><span class=\"line\">+</span><br><span class=\"line\">结果是：7</span><br></pre></td></tr></table></figure></p>\n<p>将上述源码做一下改动<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">'--number1'</span>,help=<span class=\"string\">'第一个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--number2'</span>,help=<span class=\"string\">'第二个数字'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--operation'</span>,help=<span class=\"string\">'操作符'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>输入命令<code>python demo.py -h</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: fmt output.py [-h] [--number1 NUMBER1] [--number2 NUMBER2]</span><br><span class=\"line\">                     [--operation OPERATION]</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  --number1 NUMBER1     第一个数字</span><br><span class=\"line\">  --number2 NUMBER2     第二个数字</span><br><span class=\"line\">  --operation OPERATION   操作符</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们可以看到不一致，此时的调用可以采用<code>python demo --number 2 --number 5 --operation +</code>来输入</li>\n</ul>\n<h2 id=\"2-这是第二次写Argparse这个模块，Anyway，那就写的深入点吧\"><a href=\"#2-这是第二次写Argparse这个模块，Anyway，那就写的深入点吧\" class=\"headerlink\" title=\"2.这是第二次写Argparse这个模块，Anyway，那就写的深入点吧\"></a><center>2.这是第二次写Argparse这个模块，Anyway，那就写的深入点吧</center></h2><ul>\n<li>今天我们这里主要来讲<code>add_argument()</code>这个方法，这也是Argparse这个模块里面使用最多的方法。</li>\n</ul>\n<h3 id=\"2-1-Name或者flags参数\"><a href=\"#2-1-Name或者flags参数\" class=\"headerlink\" title=\"2.1 Name或者flags参数\"></a>2.1 Name或者flags参数</h3><p>我们使用<code>add_argument()</code>来创建新的参数的时候，必须知道新的参数是位置参数还是可选参数，以及参数是否使用缩写。当我们创建位置参数时，可以创建如下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'inter'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>然后输入命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python argp.py 12</span><br></pre></td></tr></table></figure></p>\n<p>传进去的参数12，就被赋给了<code>inter</code>,随后被打印出来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\codeme\\python learn\\VS code\\python basic&gt; python .\\argp.py -i 12</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们看，如何创建一个可选参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>这时的命令该怎么输呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python argp.py --inter 12</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以了，之所以称其为可选参数，是因为如果你不传递参数进去，程序也不会报错，而之前的位置参数，当不传递参数进去时，就会报错了。<code>--inter</code>显然有些麻烦，那如何简写呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'-i'</span>,<span class=\"string\">'--inter'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>这样输入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python argp.py -i 12</span><br></pre></td></tr></table></figure></p>\n<p>就仍然达到传递参数12进去的效果了。这就说明可选参数以<code>&#39;-&#39;</code>来表明，而其他的参数被认为是位置参数了。</p>\n<h3 id=\"2-2-action参数\"><a href=\"#2-2-action参数\" class=\"headerlink\" title=\"2.2 action参数\"></a>2.2 action参数</h3><p><code>action</code> 关键字指出应该如何处理命令行参数</p>\n<p><code>&#39;store&#39;</code>只是保存参数，是默认的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'12'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>输出为 <code>12</code></p>\n<p><code>&#39;store_const&#39;</code>保存const关键字指出的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,action=<span class=\"string\">'store_const'</span>,const=<span class=\"number\">23</span>)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>输出为 <code>23</code></p>\n<p><code>&#39;store_true&#39;</code>和<code>&#39;store_false&#39;</code> - 它们是<code>&#39;store_const&#39;</code>的特殊情形，分别用于保存值True和False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,action=<span class=\"string\">'store_true'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--float'</span>,action=<span class=\"string\">'store_false'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--double'</span>,action=<span class=\"string\">'store_false'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'--float'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter,args.float,args.double)</span><br></pre></td></tr></table></figure></p>\n<p>输出 <code>True False True</code></p>\n<p><code>&#39;append&#39;</code> - 保存一个列表，并将每个参数值附加在列表的后面。这对于允许指定多次的选项很有帮助。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,action=<span class=\"string\">'append'</span>)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'12'</span>,<span class=\"string\">'--inter'</span>,<span class=\"string\">'45'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>这里由于<code>--inter</code>可以调用多次，将后面的数字加到其列表里，所以输出为<code>[&#39;12&#39;, &#39;45&#39;]</code></p>\n<p><code>&#39;append_const&#39;</code> - 保存一个列表，并将const关键字参数指出的值附加在列表的后面。（注意const关键字参数默认是None。）<code>&#39;append_const&#39;</code> 动作在多个参数需要保存常量到相同的列表时特别有用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,dest=<span class=\"string\">'types'</span>,action=<span class=\"string\">'append_const'</span>,const=int)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--float'</span>,dest=<span class=\"string\">'types'</span>,action=<span class=\"string\">'append_const'</span>,const=float)</span><br><span class=\"line\"></span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'--inter'</span>,<span class=\"string\">'--float'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.types)</span><br></pre></td></tr></table></figure></p>\n<p>输出 <code>[&lt;class &#39;int&#39;&gt;, &lt;class &#39;float&#39;&gt;]</code></p>\n<p><code>&#39;count&#39;</code> - 计算关键字参数出现的次数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--inter'</span>,<span class=\"string\">'-i'</span>,action=<span class=\"string\">'count'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'-iii'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.inter)</span><br><span class=\"line\">args=parser.parse_args([<span class=\"string\">'-iiiiii'</span>])</span><br><span class=\"line\">print(args.inter)</span><br></pre></td></tr></table></figure></p>\n<p>输出为 <code>3 6</code></p>\n<h3 id=\"2-3-nargs参数\"><a href=\"#2-3-nargs参数\" class=\"headerlink\" title=\"2.3 nargs参数\"></a>2.3 nargs参数</h3><p><code>nargs</code>关键字参数将一个动作(<code>action</code>)与不同数目的命令行参数关联在一起。</p>\n<blockquote>\n<p>它的值首先可以是一个整数 <strong><code>N</code></strong></p>\n</blockquote>\n<ul>\n<li>我们先来看一个默认的情况, 没有nargs参数：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py --foo 2</span><br></pre></td></tr></table></figure></p>\n<p>结果为 <strong><code>2</code></strong></p>\n<ul>\n<li>再来看一个具有nargs参数的情况  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>,nargs=<span class=\"number\">2</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里 <code>nargs=2</code> ,规定可以传递两个参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py --foo 2 3</span><br></pre></td></tr></table></figure></p>\n<p>来看一下输出<br><code>[&#39;2&#39;, &#39;3&#39;]</code>,是一个列表，而之前的是元素本身。</p>\n<blockquote>\n<p><code>nargs</code>的值可以是 <strong><code>？</code></strong>,如果有的话就从命令行读取一个参数并生成一个元素。如果没有对应的命令行参数，则产生一个来自default的值。注意，对于可选参数，有另外一种情况 - 有选项字符串但是后面没有跟随命令行参数。在这种情况下，将生成一个来自const的值</p>\n</blockquote>\n<ul>\n<li>来看一个有参数的情况<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>,nargs=<span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py --foo 2</span><br></pre></td></tr></table></figure></p>\n<p>结果为 <strong><code>2</code></strong></p>\n<ul>\n<li>没有参数时<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>,nargs=<span class=\"string\">\"?\"</span>,default=<span class=\"string\">'2'</span>,const=<span class=\"string\">'3'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'int'</span>,nargs=<span class=\"string\">'?'</span>,default=<span class=\"string\">'z'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">print(args.foo,args.int)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py</span><br></pre></td></tr></table></figure></p>\n<p>输出 <strong><code>2 z</code></strong></p>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py y --foo</span><br></pre></td></tr></table></figure></p>\n<p>输出 <strong><code>3 y</code></strong></p>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py y --foo 5</span><br></pre></td></tr></table></figure></p>\n<p>输出 <strong><code>5 y</code></strong></p>\n<blockquote>\n<p><code>nargs</code>的值可以是 <code>*</code>和 <code>+</code>, 出现的所有命令行参数都被收集到一个列表中。注意，一般情况下具有多个带有 <code>nargs=&#39;*&#39;</code>的位置参数是不合理的，但是多个带有 <code>nargs=&#39;*&#39;</code>的可选参数是可能的。<code>+</code>的情况下，如果没有至少出现一个命令行参数将会产生一个错误信息，<code>*</code>不会产生这个问题。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\">parser=argparse.ArgumentParser()</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--foo'</span>, nargs=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--bar'</span>, nargs=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'baz'</span>, nargs=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">args=parser.parse_args()</span><br><span class=\"line\">print(<span class=\"string\">'args.foo=%6s'</span>%args.foo,<span class=\"string\">'args.bar=%6s'</span>%args.bar,<span class=\"string\">'args.baz=%6s'</span>%args.baz,sep=<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python args.py a b --foo 2 3 --bar z s</span><br></pre></td></tr></table></figure></p>\n<p>输出</p>\n<p><code>args.foo=[&#39;2&#39;, &#39;3&#39;]</code></p>\n<p><code>args.bar=[&#39;z&#39;, &#39;s&#39;]</code></p>\n<p><code>args.baz=[&#39;a&#39;, &#39;b&#39;]</code></p>\n<blockquote>\n<p>如果没有提供 <code>nargs</code>关键字参数，读取的参数个数取决于<code>action</code>。通常这意味着将读取一个命令行参数并产生一个元素（不是一个列表）。</p>\n</blockquote>\n"},{"title":"二叉树遍历顺序","date":"2017-11-22T02:28:28.000Z","_content":"# <center>二叉树遍历顺序</center>\n* 第一种：`先序遍历`  \n遍历的顺序是根->左->右，如图1\n<center>{% asset_img 1.jpg [图1] %}</center>\n\n* 第二种：`中序遍历`  \n遍历顺序是左->根->右，如图2\n<center>{% asset_img 2.jpg [图2] %}</center>\n\n* 第三种：`后序遍历`  \n遍历顺序是左->右->根，如图3\n<center>{% asset_img 3.jpg [图3] %}</center>\n\n\n\n","source":"_posts/二叉树遍历顺序.md","raw":"---\ntitle: 二叉树遍历顺序\ndate: 2017-11-22 10:28:28\ntags:\n---\n# <center>二叉树遍历顺序</center>\n* 第一种：`先序遍历`  \n遍历的顺序是根->左->右，如图1\n<center>{% asset_img 1.jpg [图1] %}</center>\n\n* 第二种：`中序遍历`  \n遍历顺序是左->根->右，如图2\n<center>{% asset_img 2.jpg [图2] %}</center>\n\n* 第三种：`后序遍历`  \n遍历顺序是左->右->根，如图3\n<center>{% asset_img 3.jpg [图3] %}</center>\n\n\n\n","slug":"二叉树遍历顺序","published":1,"updated":"2017-12-14T07:09:42.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3mhqgi0008v47xf6by9msz","content":"<h1 id=\"二叉树遍历顺序\"><a href=\"#二叉树遍历顺序\" class=\"headerlink\" title=\"二叉树遍历顺序\"></a><center>二叉树遍历顺序</center></h1><ul>\n<li><p>第一种：<code>先序遍历</code><br>遍历的顺序是根-&gt;左-&gt;右，如图1</p>\n<center><img src=\"/2017/11/22/二叉树遍历顺序/1.jpg\" title=\"[图1]\"></center>\n</li>\n<li><p>第二种：<code>中序遍历</code><br>遍历顺序是左-&gt;根-&gt;右，如图2</p>\n<center><img src=\"/2017/11/22/二叉树遍历顺序/2.jpg\" title=\"[图2]\"></center>\n</li>\n<li><p>第三种：<code>后序遍历</code><br>遍历顺序是左-&gt;右-&gt;根，如图3</p>\n<center><img src=\"/2017/11/22/二叉树遍历顺序/3.jpg\" title=\"[图3]\"></center>\n\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"二叉树遍历顺序\"><a href=\"#二叉树遍历顺序\" class=\"headerlink\" title=\"二叉树遍历顺序\"></a><center>二叉树遍历顺序</center></h1><ul>\n<li><p>第一种：<code>先序遍历</code><br>遍历的顺序是根-&gt;左-&gt;右，如图1</p>\n<center><img src=\"/2017/11/22/二叉树遍历顺序/1.jpg\" title=\"[图1]\"></center>\n</li>\n<li><p>第二种：<code>中序遍历</code><br>遍历顺序是左-&gt;根-&gt;右，如图2</p>\n<center><img src=\"/2017/11/22/二叉树遍历顺序/2.jpg\" title=\"[图2]\"></center>\n</li>\n<li><p>第三种：<code>后序遍历</code><br>遍历顺序是左-&gt;右-&gt;根，如图3</p>\n<center><img src=\"/2017/11/22/二叉树遍历顺序/3.jpg\" title=\"[图3]\"></center>\n\n\n\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/manjaro配置及美化/1.png","slug":"1.png","post":"cjf3mhqg50002v47xadyop24h","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/1.png","slug":"1.png","post":"cjf3mhqg60003v47xy9u9qyto","modified":0,"renderable":0},{"_id":"source/_posts/vscode-python-配置环境/1.png","slug":"1.png","post":"cjf3mhqg30001v47xdehxpdgf","modified":0,"renderable":0},{"_id":"source/_posts/vscode-python-配置环境/2.png","slug":"2.png","post":"cjf3mhqg30001v47xdehxpdgf","modified":0,"renderable":0},{"_id":"source/_posts/二叉树遍历顺序/1.jpg","slug":"1.jpg","post":"cjf3mhqgi0008v47xf6by9msz","modified":0,"renderable":0},{"_id":"source/_posts/二叉树遍历顺序/2.jpg","slug":"2.jpg","post":"cjf3mhqgi0008v47xf6by9msz","modified":0,"renderable":0},{"_id":"source/_posts/二叉树遍历顺序/3.jpg","slug":"3.jpg","post":"cjf3mhqgi0008v47xf6by9msz","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjf3mhqg60003v47xy9u9qyto","tag_id":"cjf3mhqg70004v47x5f6v0axo","_id":"cjf3mhqg90005v47x6yi229u7"}],"Tag":[{"name":"python基本知识","_id":"cjf3mhqg70004v47x5f6v0axo"}]}}